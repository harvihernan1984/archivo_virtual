--
-- PostgreSQL database dump
--

-- Dumped from database version 9.3.5
-- Dumped by pg_dump version 10.3

-- Started on 2019-08-31 15:20:08

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 1 (class 3079 OID 11829)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 2223 (class 0 OID 0)
-- Dependencies: 1
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- TOC entry 666 (class 1247 OID 467266)
-- Name: codigos; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.codigos AS (
	cod character varying(10)
);


ALTER TYPE public.codigos OWNER TO postgres;

--
-- TOC entry 208 (class 1255 OID 467267)
-- Name: adm_reg_base_reloj(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.adm_reg_base_reloj(pcedula character varying, pfecha_hora character varying, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
	vexiste integer;
 BEGIN
	SELECT count(*) into vexiste FROM adm_base_reloj where cedula=pcedula and fecha_hora=pfecha_hora;
	IF vexiste=0 THEN
		res:='SI';
		cod:='';
		Insert into adm_base_reloj (cedula, fecha_hora) Values(pcedula, pfecha_hora);
		return query select  res, cod;
		return;
	ELSE
		res:='NO';
		cod:='';
	END IF;
		
	return query select  res, cod;
       
 END;
 $$;


ALTER FUNCTION public.adm_reg_base_reloj(pcedula character varying, pfecha_hora character varying, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 210 (class 1255 OID 467268)
-- Name: atf_tg_ing_detalle_mov(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.atf_tg_ing_detalle_mov() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
stock numeric(16,3) :=0.0;
cantidad_new numeric(16,3); --indica saldo actual new
cantidad_old numeric(16,3); --indica saldo actual old
precio_new numeric(16,3); --almacena calculo de precio promedio para new
precio_old numeric(16,3); --almacena calculo de precio promedio para old
precio_pro_new numeric(16,3); --almacena calculo de precio promedio para new
precio_pro_old numeric(16,3); --almacena calculo de precio promedio para old
BEGIN
 
 IF(TG_OP='INSERT')THEN --- Cuando sea INSERT
	
	--preguntamos si existe el registro de estock del producto en esta empresa en este periodo en la bodega
	IF(new.tipo='INB'or new.tipo='INI')then
		stock = new.cantidad;
	END IF;
	IF(new.tipo='EGB')then
		stock = new.cantidad * -1;
	END IF;
	
	IF NOT EXISTS(select * from atf_saldos_producto where empresa=new.empresa and periodo=new.periodo and producto=new.producto and bodega=new.bodega) THEN
		--creamos el nuevo registro de saldo
		--por el momento no colocamos seriales
		insert into  atf_saldos_producto(empresa,periodo,bodega,producto,cantidad,precio,ultimo_precio)
		VALUES(new.empresa,new.periodo,new.bodega,new.producto,stock,new.precio,new.precio);
	ELSE
		--actualizamos el registro de saldo
		--rescatamos la cantidad actual del producto en la empresa, periodo y bodega actual.
		select cantidad,precio into cantidad_new,precio_new from atf_saldos_producto where empresa=new.empresa and periodo=new.periodo and producto=new.producto and bodega=new.bodega;
		IF new.cantidad<>cantidad_new then
			precio_pro_new=((cantidad_new * precio_new) + (new.cantidad * new.precio)) / (new.cantidad + cantidad_new);
		else
			precio_pro_new=0.00;
		end if;
		IF(new.tipo='INB'or new.tipo='INI')then
			UPDATE atf_saldos_producto 
			SET cantidad=cantidad + stock, ultimo_precio=new.precio, precio=precio_pro_new
			WHERE empresa=new.empresa and periodo=new.periodo and producto=new.producto and bodega=new.bodega;
		END IF;
		IF(new.tipo='EGB')then
			UPDATE atf_saldos_producto 
			SET cantidad=cantidad + stock, ultimo_precio=new.precio
			WHERE empresa=new.empresa and periodo=new.periodo and producto=new.producto and bodega=new.bodega;
		END IF;
	END IF;
	
 END IF;
 IF(TG_OP='UPDATE')THEN --- Cuando sea UPDATE actualizacion
	--EN ESTE CASO YA DEBERIA EXISTIR EL REGISTRO DE SALDO
	--actualizamos el registro de saldo
	select cantidad,precio into cantidad_new,precio_new from atf_saldos_producto where empresa=new.empresa and periodo=new.periodo and producto=new.producto and bodega=new.bodega;
	
	select cantidad,precio into cantidad_old,precio_old from atf_saldos_producto where empresa=old.empresa and periodo=old.periodo and producto=old.producto and bodega=old.bodega;
	
	
	IF(new.tipo='INB'or new.tipo='INI')then
		IF old.cantidad<>cantidad_old then
			precio_pro_old=((cantidad_old * precio_old) - (old.cantidad * old.precio)) / (old.cantidad - cantidad_old);
		else
			precio_pro_old=0.00;
		end if;
		IF new.cantidad<>cantidad_new then
			precio_pro_new=((cantidad_new * precio_new) + (new.cantidad * new.precio)) / (new.cantidad + cantidad_new);
		else
			precio_pro_new=0.00;
		end if;
		UPDATE atf_saldos_producto 
		SET cantidad=cantidad - old.cantidad, precio=precio_pro_old
		WHERE empresa=old.empresa and periodo=old.periodo and producto=old.producto and bodega=old.bodega;
		UPDATE atf_saldos_producto 
		SET cantidad=cantidad + new.cantidad, ultimo_precio=new.precio, precio=precio_pro_new
		WHERE empresa=new.empresa and periodo=new.periodo and producto=new.producto and bodega=new.bodega;
	END IF;
	IF(new.tipo='EGB')then
		IF old.cantidad<>cantidad_old then
			precio_pro_old=((cantidad_old * precio_old) + (old.cantidad * old.precio)) / (old.cantidad + cantidad_old);
		else
			precio_pro_old=0.00;
		end if;
		IF new.cantidad<>(cantidad_new + cantidad_old) then
			precio_pro_new=((cantidad_new * precio_new) - (new.cantidad * new.precio)) / (new.cantidad - cantidad_new);
		else
			precio_pro_new=0.00;
		end if;
		UPDATE atf_saldos_producto 
		SET cantidad=cantidad + old.cantidad, precio=precio_pro_old
		WHERE empresa=old.empresa and periodo=old.periodo and producto=old.producto and bodega=old.bodega;
		UPDATE atf_saldos_producto 
		SET cantidad=cantidad - new.cantidad, precio=precio_pro_new
		WHERE empresa=new.empresa and periodo=new.periodo and producto=new.producto and bodega=new.bodega;
	END IF;
	
 END IF;
 IF(TG_OP='DELETE')THEN --- Cuando sea ELIMINA UN REGISTRO actualizacion
	select cantidad,precio into cantidad_old,precio_old from atf_saldos_producto where empresa=old.empresa and periodo=old.periodo and producto=old.producto and bodega=old.bodega;
	IF old.cantidad<>cantidad_old then
		precio_pro_old=((cantidad_old * precio_old) - (old.cantidad * old.precio)) / (old.cantidad - cantidad_old);
	else
		precio_pro_old=0.00;
	end if;
	IF(old.tipo='INB'or old.tipo='INI')then
		UPDATE atf_saldos_producto 
		SET cantidad=cantidad - old.cantidad, precio=precio_pro_old
		WHERE empresa=old.empresa and periodo=old.periodo and producto=old.producto and bodega=old.bodega;
	END IF;
	IF(old.tipo='EGB')then
		UPDATE atf_saldos_producto 
		SET cantidad=cantidad + old.cantidad, precio=((cantidad * precio) + (old.cantidad * old.precio)) / (old.cantidad + cantidad)
		WHERE empresa=old.empresa and periodo=old.periodo and producto=old.producto and bodega=old.bodega;
	END IF;
 END IF;
 
 return null;
END;
$$;


ALTER FUNCTION public.atf_tg_ing_detalle_mov() OWNER TO postgres;

--
-- TOC entry 209 (class 1255 OID 467269)
-- Name: es_fecha(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.es_fecha(pvalor character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
 DECLARE
      vresultado boolean;
      vcodigo date;
 BEGIN
	BEGIN
		--select coalesce(max(codigo),0) + 1 into vcodigo from sis_validar;
		--insert into sis_validar(codigo,numero) values(vcodigo, cast(pvalor as integer));
		vcodigo=cast(pvalor as date);
		--delete from sis_validar where codigo=vcodigo;
		vresultado=true;
	EXCEPTION WHEN OTHERS THEN
		vresultado=false;		
	END;
	return vresultado;
	--select es_numero('9999999999999999999999');
 END;
 $$;


ALTER FUNCTION public.es_fecha(pvalor character varying) OWNER TO postgres;

--
-- TOC entry 225 (class 1255 OID 467270)
-- Name: es_numero(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.es_numero(pvalor character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
 DECLARE
      vresultado boolean;
      vcodigo numeric;
 BEGIN
	BEGIN
		--select coalesce(max(codigo),0) + 1 into vcodigo from sis_validar;
		--insert into sis_validar(codigo,numero) values(vcodigo, cast(pvalor as integer));
		vcodigo=cast(pvalor as numeric);
		--delete from sis_validar where codigo=vcodigo;
		vresultado=true;
	EXCEPTION WHEN OTHERS THEN
		vresultado=false;		
	END;
	return vresultado;
	--select es_numero('9999999999999999999999');
 END;
 $$;


ALTER FUNCTION public.es_numero(pvalor character varying) OWNER TO postgres;

--
-- TOC entry 224 (class 1255 OID 467271)
-- Name: fechacompleta(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fechacompleta(pfecha character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
    DECLARE
     dia varchar;
     mes varchar;
     mesletra varchar;
     anio varchar;
     fecha varchar;
    BEGIN  
	
	select cast(cast(pfecha as date) as varchar) into fecha;
        dia:=to_char(to_timestamp(fecha, 'YYYY-MM-DD'), 'DD');
        mes:=to_char(to_timestamp(fecha, 'YYYY-MM-DD'), 'MM');
        if mes='01' then
           mesletra='Enero';
        end if;
        if mes='02' then
           mesletra='Febrero';
        end if;
        if mes='03' then
           mesletra='Marzo';
        end if;
        if mes='04' then
           mesletra='Abril';
        end if;
        if mes='05' then
           mesletra='Mayo';
        end if;
        if mes='06' then
           mesletra='Junio';
        end if;
        if mes='07' then
           mesletra='Julio';
        end if;
        if mes='08' then
           mesletra='Agosto';
        end if;
        if mes='09' then
           mesletra='Septiembre';
        end if;
        if mes='10' then
           mesletra='Octubre';
        end if;
        if mes='11' then
           mesletra='Noviembre';
        end if;
        if mes='12' then
           mesletra='Diciembre';
        end if;
        anio:=to_char(to_timestamp(fecha, 'YYYY-MM-DD'), 'YYYY');
        RETURN dia || ' de ' || mesletra || ' del ' || anio;
    END;
    $$;


ALTER FUNCTION public.fechacompleta(pfecha character varying) OWNER TO postgres;

--
-- TOC entry 226 (class 1255 OID 467272)
-- Name: fechacompleta2(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fechacompleta2(pfecha character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
    DECLARE
     dia varchar;
     mes varchar;
     mesletra varchar;
     anio varchar;
     fecha varchar;
    BEGIN  
	
	select cast(cast(pfecha as date) as varchar) into fecha;
        dia:=to_char(to_timestamp(fecha, 'YYYY-MM-DD'), 'DD');
        mes:=to_char(to_timestamp(fecha, 'YYYY-MM-DD'), 'MM');
        if mes='01' then
           mesletra='Enero';
        end if;
        if mes='02' then
           mesletra='Febrero';
        end if;
        if mes='03' then
           mesletra='Marzo';
        end if;
        if mes='04' then
           mesletra='Abril';
        end if;
        if mes='05' then
           mesletra='Mayo';
        end if;
        if mes='06' then
           mesletra='Junio';
        end if;
        if mes='07' then
           mesletra='Julio';
        end if;
        if mes='08' then
           mesletra='Agosto';
        end if;
        if mes='09' then
           mesletra='Septiembre';
        end if;
        if mes='10' then
           mesletra='Octubre';
        end if;
        if mes='11' then
           mesletra='Noviembre';
        end if;
        if mes='12' then
           mesletra='Diciembre';
        end if;
        anio:=to_char(to_timestamp(fecha, 'YYYY-MM-DD'), 'YYYY');
        RETURN dia || ' de ' || mesletra || ' del ' || anio;
    END;
    $$;


ALTER FUNCTION public.fechacompleta2(pfecha character varying) OWNER TO postgres;

--
-- TOC entry 211 (class 1255 OID 467274)
-- Name: fun_ejemplo_array(character varying[]); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fun_ejemplo_array(pcondicion character varying[], OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
     condicion varchar [];
 BEGIN
     --condicion := string_to_array(pcondicion,'|');
      FOR i IN 1..(array_length(pcondicion, 1)) LOOP
	res=pcondicion[i];
	cod=pcondicion[i];
        return query select res,cod;
      END LOOP;
	return;
       
 END;
 $$;


ALTER FUNCTION public.fun_ejemplo_array(pcondicion character varying[], OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 212 (class 1255 OID 467273)
-- Name: fun_ejemplo_array(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fun_ejemplo_array(pcondicion character varying, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
     condicion varchar [];
     cond varchar [];
 BEGIN
     condicion := string_to_array(pcondicion,'|');
      FOR i IN 1..(array_length(condicion, 1)) LOOP
	cond := string_to_array(condicion[i],';');
	res=cond[1];
	cod=cond[2];
        return query select res,cod;
      END LOOP;
	return;
       
 END;
 $$;


ALTER FUNCTION public.fun_ejemplo_array(pcondicion character varying, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 214 (class 1255 OID 467275)
-- Name: fun_ordentipo(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fun_ordentipo(pnomenclatura character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
 DECLARE
     nome integer [];
     valor integer ;
     resul integer;
 BEGIN
      nome := string_to_array(pnomenclatura,'.');
      valor := 100000000;
      resul :=0;
      FOR i IN 1..(array_length(nome, 1)) LOOP
	resul:= resul + (nome[i]*valor);
        valor:=valor/100;
      END LOOP;
	return resul;
       
 END;
 $$;


ALTER FUNCTION public.fun_ordentipo(pnomenclatura character varying) OWNER TO postgres;

--
-- TOC entry 227 (class 1255 OID 467276)
-- Name: gd_borra_atributo_documento(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.gd_borra_atributo_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
     vcodigo varchar; 
     vdatos_auditoria varchar;
     vauditoria text;
     vauditoria_des text;
     vpasa_validacion integer;
 BEGIN

	BEGIN
		if pcodigo <>'' then-- nuevo
		--nueva auditoria
			update gd_atributos_documento set borrado='S' where codigo=pcodigo;
		
			if vauditoria<>vauditoria_des then
				insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'GD_ATRIBUTOS_DOCUMENTO','DELETE',CURRENT_TIMESTAMP,'Atributo atributo borrado codigo' || pcodigo);
			end if;
			--insert into auditoria(usuario,n_usuario,accion,fecha_hora,datos) values(pusuario,pusuario,'UPDATE ESTABLECIMIENTO ' || pcodigo,CURRENT_TIMESTAMP,'');
			res:='DELETE';
			cod:=pcodigo;
	
		else 
			res:='NO EXISTE CODIGO DEL ATRIBUTO';
			cod:='';
		end if;
	EXCEPTION WHEN OTHERS THEN
		res:='ERROR';
		cod:=sqlerrm;
        --mensaje := mensaje || ' ******** El bloque de adentro, con errores';
		
	END;
	return query select  res, cod;
       
 END;
 $$;


ALTER FUNCTION public.gd_borra_atributo_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 228 (class 1255 OID 467277)
-- Name: gd_borra_contenedor(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.gd_borra_contenedor(pcodigo character varying, pusuario character varying, pempresa_act character varying, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
     vcodigo varchar; 
     vdatos_auditoria varchar;
     vauditoria text;
     vauditoria_des text;
     vpasa_validacion integer;
 BEGIN
        BEGIN
	--validar que el contenedor no tenga contenido
	select count(*) into vpasa_validacion from gd_contenedor where contenedor_padre=pcodigo and borrado='N' ;
	if vpasa_validacion > 0 then
		res:='Error : EL CONTENEDOR NO PUEDE SER BORRADO AUN NO ESTA VACIO';
		cod:='';
		return query select  res, cod;
		return;
	end if;
	--validar que el contenedor no tenga contenido
	select count(*) into vpasa_validacion from gd_documento where contenedor=pcodigo and borrado='N';
	if vpasa_validacion > 0 then
		res:='Error : EL CONTENEDOR NO PUEDE SER BORRADO AUN NO ESTA VACIO CODIGO=' || pcodigo;
		cod:='';
		return query select  res, cod;
		return;
	end if;
	--validar 
	--select count(*) into vpasa_validacion from gd_contenedor where codigo=pcodigo and empresa=pempresa_act;
	--if vpasa_validacion = 0 then
	--	res:='Error : El usuario no tiene privilegios para borrar este contenedor ';--CODIGO=' || pcodigo || ' EMPRESA=' || pempresa_act;
	--	cod:='';
	--	return query select  res, cod;
	--	return;
	--end if;
	if get_puede_editar_contenido(pcodigo,pempresa_act) = 'NO' then
		res:='Error : El usuario no tiene privilegios para borrar este contenedor CODIGO=' || pcodigo || ' EMPRESA=' || pempresa_act;
		cod:='';
		return query select  res, cod;
		return;
	end if;
	--codigo,nombre,sector,direccion,ruc,ruc_propietario,nombres_propietario,tipo_id_propietario,tipo,provincia,canton,parroquia,actividad,telefono,telefono_propietario,direccion_propietario 
	if pcodigo <>'' then-- nuevo
		UPDATE gd_contenedor SET borrado='S' where codigo=pcodigo;
		---nueva auditoria 
		vauditoria='Contenedor codigo=' || pcodigo || ' fue Borrado por usuario=' || pusuario;
		insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'GD_DOCUMENTO','BORRADO',CURRENT_TIMESTAMP,vauditoria);

		--insert into auditoria(usuario,n_usuario,accion,fecha_hora,datos) values(pusuario,pusuario,'INSERT ESTABLECIMIENTO' || vcodigo,CURRENT_TIMESTAMP,'');
		res:='ok';
		cod:=vcodigo;
	else--actualizar
		
		res:='Error: NO se ingreso codigo del documento';
		cod:=pcodigo;
	end if;
	EXCEPTION WHEN OTHERS THEN
		res:='ERROR';
		cod:=sqlerrm;
        --mensaje := mensaje || ' ******** El bloque de adentro, con errores';
		
	END;
	return query select  res, cod;
       
 END;
 $$;


ALTER FUNCTION public.gd_borra_contenedor(pcodigo character varying, pusuario character varying, pempresa_act character varying, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 229 (class 1255 OID 467278)
-- Name: gd_borra_documento(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.gd_borra_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
     vcodigo varchar; 
     vdatos_auditoria varchar;
     vauditoria text;
     vauditoria_des text;
     vpasa_validacion integer;
 BEGIN
	--validamos si el usuario pertenece a la empresa actual en que se encuentra
	select count(*) into vpasa_validacion from sis_usuario where codigo=pusuario and empresa=pempresa_act;
	if vpasa_validacion = 0 then
		res:='Error : el usuario no pertence a la empresa actual';
		cod:='';
		return query select  res, cod;
		return;
	end if;
	--validar si el usuario puede modificar el documento
	select count(*) into vpasa_validacion from gd_documento where codigo=pcodigo and empresa=pempresa_act;
	if vpasa_validacion = 0 then
		res:='Error : El usuario no tiene privilegios para borrar estos documentos';
		cod:='';
		return query select  res, cod;
		return;
	end if;
	--codigo,nombre,sector,direccion,ruc,ruc_propietario,nombres_propietario,tipo_id_propietario,tipo,provincia,canton,parroquia,actividad,telefono,telefono_propietario,direccion_propietario 
	if pcodigo <>'' then-- nuevo
		UPDATE gd_documento SET borrado='S' where codigo=pcodigo and contenedor=pcontenedor;
		---nueva auditoria 
		vauditoria='Documento codigo=' || pcodigo || ' y del contenedor=' || pcontenedor || ' fue Borrado por usuario=' || pusuario;
		insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'GD_DOCUMENTO','BORRADO',CURRENT_TIMESTAMP,vauditoria);

		--insert into auditoria(usuario,n_usuario,accion,fecha_hora,datos) values(pusuario,pusuario,'INSERT ESTABLECIMIENTO' || vcodigo,CURRENT_TIMESTAMP,'');
		res:='ok';
		--res:='codigo=' || pcodigo || 'contenedor=' || pcontenedor;
		cod:=vcodigo;
	else--actualizar
		--res:='codigo=' || pcodigo || 'contenedor=' || pcontenedor;
		res:='Error: NO se ingreso codigo del documento';
		cod:=pcodigo;
	end if;
	return query select  res, cod;
       
 END;
 $$;


ALTER FUNCTION public.gd_borra_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 230 (class 1255 OID 467279)
-- Name: gd_borra_empresa(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.gd_borra_empresa(pcodigo character varying, pusuario character varying, pmodulo character varying, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
     vpasa varchar; 
     vdatos_auditoria varchar;
     vauditoria text;
     vauditoria_des text;
     vpasa_validacion integer;
     vdirectorio varchar;
 BEGIN
	select directorio into vdirectorio from gd_empresa where codigo= pcodigo;
	select count(*) into vpasa_validacion from get_directorio_padre_all(vdirectorio);
	if vpasa_validacion > 0 then
		res:='Error : La empresa tiene un directorio creado, no se la puede borrar aun.';
		cod:='';
		return query select  res, cod;
		return;
	end if;
	select f.res into vpasa from sis_accesos_rol_usuario(pusuario,'',pmodulo) f;
	if vpasa='NO' then
		res:='Error : El usuario no tiene privilegios para realizar esta accion. (Borrar Empresa)';
		cod:='';
		return query select  res, cod;
		return;
	end if;
	--codigo,nombre,sector,direccion,ruc,ruc_propietario,nombres_propietario,tipo_id_propietario,tipo,provincia,canton,parroquia,actividad,telefono,telefono_propietario,direccion_propietario 
	if pcodigo <>'' then-- nuevo
		UPDATE gd_empresa SET borrado='S' where codigo=pcodigo;
		---nueva auditoria 
		vauditoria='Empresa codigo=' || pcodigo || ' fue Borrado por usuario=' || pusuario;
		insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'gd_empresa','BORRADO',CURRENT_TIMESTAMP,vauditoria);

		--insert into auditoria(usuario,n_usuario,accion,fecha_hora,datos) values(pusuario,pusuario,'INSERT ESTABLECIMIENTO' || vcodigo,CURRENT_TIMESTAMP,'');
		res:='DELETE';
		cod:='';
	else--actualizar
		
		res:='Error: NO se ingreso codigo de la empresa';
		cod:=pcodigo;
	end if;
	return query select  res, cod;
       
 END;
 $$;


ALTER FUNCTION public.gd_borra_empresa(pcodigo character varying, pusuario character varying, pmodulo character varying, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 216 (class 1255 OID 467280)
-- Name: gd_get_datos_documentos(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.gd_get_datos_documentos(pdatos character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
 DECLARE
     vatributos character varying [];
     vdatos character varying [];
     vseparador character varying;
     vnombre_tipo character varying;
     vresul character varying;
 BEGIN
      vatributos := string_to_array(pdatos,'|');
      vseparador='';
      vresul :='';
      FOR i IN 1..(array_length(vatributos, 1)) LOOP
	vdatos= string_to_array(vatributos[i],';');
	select nombre into vnombre_tipo  from gd_atributos_documento where borrado='N'and codigo=vdatos[1];
	IF FOUND THEN
		vresul:= vresul || vseparador || vdatos[2];
		vseparador=';';
	END IF;
      END LOOP;
	return vresul;
       
 END;
 $$;


ALTER FUNCTION public.gd_get_datos_documentos(pdatos character varying) OWNER TO postgres;

--
-- TOC entry 215 (class 1255 OID 467281)
-- Name: gd_get_datos_documentos_campos(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.gd_get_datos_documentos_campos(pdatos character varying, ptipo_documento character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
 DECLARE
     vatributos character varying [];
     vdatos character varying [];
     vseparador character varying;
     vnombre_tipo character varying;
     vresul character varying;
 BEGIN
      vatributos := string_to_array(pdatos,'|');
      vseparador='';
      vresul :='';
      if pdatos<>'' then
	      FOR i IN 1..(array_length(vatributos, 1)) LOOP
		vdatos= string_to_array(vatributos[i],';');
		select nombre into vnombre_tipo  from gd_atributos_documento where borrado='N' and tipo_documento=ptipo_documento and codigo=vdatos[1];
		IF FOUND THEN
			vresul:= vresul || vseparador || vnombre_tipo || ': ' || vdatos[2];
			vseparador='<br>';
		END IF;
	      END LOOP;
	end if;
	return vresul;
       
 END;
 $$;


ALTER FUNCTION public.gd_get_datos_documentos_campos(pdatos character varying, ptipo_documento character varying) OWNER TO postgres;

--
-- TOC entry 231 (class 1255 OID 467282)
-- Name: gd_reg_anexo_documento(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.gd_reg_anexo_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, paccion character varying, pdir_fisica_documento character varying, pnombre_doc character varying, preferencia_doc character varying, pdir_virtual character varying, pextencion character varying, pfojas integer, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
	vcodigo varchar; 
	vpasa_validacion integer;
	i integer;
	vdatos_auditoria varchar;
	vauditoria text;
	vcolumnas varchar[];
	vauditoria_des text;
	vauditoria_v varchar[];
	vauditoria_des_v varchar[];
	vauditoria_resul text;
     
 BEGIN
	--validamos si el usuario pertenece a la empresa actual en que se encuentra
	select count(*) into vpasa_validacion from sis_usuario where codigo=pusuario and empresa=pempresa_act;
	if vpasa_validacion = 0 then
		res:='Error : el usuario no pertence a la empresa actual -' || pempresa_act;
		cod:='';
		return query select  res, cod;
		return;
	end if;
	if pcontenedor ='' then-- nuevo
		res:='Error : No existe documento registrado';
		cod:='';
		return query select  res, cod;
		return;
	end if;
	if pcodigo ='' then-- nuevo
		SELECT coalesce(max(cast(codigo as integer)),0) +1 as mayor into vcodigo FROM gd_documento_anexo where documento=pcontenedor ;
		IF NOT FOUND THEN
			res:='Error : no se calculo el nuevo codigo del grupo';
			cod:='';
			return query select  res, cod;
			return;
		END IF;
		select count(*) into vpasa_validacion from gd_documento where codigo=pcontenedor and empresa=pempresa_act;
		if vpasa_validacion = 0 then
			res:='Error : El usuario no tiene privilegios para agregar anexos a este documento';
			cod:='';
			return query select  res, cod;
			return;
		end if;
		Insert into gd_documento_anexo(codigo, documento, empresa, dir_fisica_documento, nombre_doc,referencia_doc,fecha_registro,dir_virtual,extencion,fojas)
		values(vcodigo, pcontenedor, pempresa_act, pdir_fisica_documento, pnombre_doc,preferencia_doc,CURRENT_TIMESTAMP,pdir_virtual,pextencion,pfojas);
		---nueva auditoria 
		select gd_documento_anexo::text into vauditoria from gd_documento_anexo where codigo=vcodigo and documento=pcontenedor ;
		insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'GD_DOCUMENTO_ANEXO','INSERT',CURRENT_TIMESTAMP,vauditoria);
		
		--insert into auditoria(usuario,n_usuario,accion,fecha_hora,datos) values(pusuario,pusuario,'INSERT ESTABLECIMIENTO' || vcodigo,CURRENT_TIMESTAMP,'');
		res:='ok';
		cod:=vcodigo;
	else--actualizar
		select count(*) into vpasa_validacion from gd_documento_anexo where codigo=pcodigo and documento=pcontenedor and empresa=pempresa_act;
		if vpasa_validacion = 0 then
			res:='Error : El usuario no tiene privilegios para editar este anexo';
			cod:='';
			return query select  res, cod;
			return;
		end if;
		--nueva auditoria
		select array(SELECT column_name::text FROM information_schema.columns WHERE table_name = 'gd_documento_anexo' order by ordinal_position) into vcolumnas;
		select array(select replace(replace(gd_documento_anexo::text,'(',''),')','') from gd_documento_anexo where codigo=pcodigo) into vauditoria_v;
		--select gd_documento_anexo::text into vauditoria from gd_documento_anexo where codigo=pcodigo and documento=pcontenedor and empresa=pempresa_act;
		update gd_documento_anexo set referencia_doc=preferencia_doc
		where codigo=pcodigo and documento=pcontenedor;
		select array(select replace(replace(gd_documento_anexo::text,'(',''),')','') from gd_documento_anexo where codigo=pcodigo) into vauditoria_des_v ;
		--select gd_documento_anexo::text into vauditoria_des from gd_documento_anexo where codigo=pcodigo and documento=pcontenedor and empresa=pempresa_act;
		vauditoria_resul='';
		FOR i IN 1..(array_length(vcolumnas, 1)) LOOP
			if vauditoria_v[i] <> vauditoria_des_v[i] then
				vauditoria_resul=vauditoria_resul || vcolumnas[i] || '(' || vauditoria_v[i] || ' -> ' || vauditoria_des_v[i] || ');';
			end if;
		END LOOP;
		if vauditoria_resul<>'' then
			insert into auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'GD_DOCUMENTO_ANEXO','UPDATE_NEW',CURRENT_TIMESTAMP, vauditoria_resul);
		end if;
		--insert into auditoria(usuario,n_usuario,accion,fecha_hora,datos) values(pusuario,pusuario,'UPDATE ESTABLECIMIENTO ' || pcodigo,CURRENT_TIMESTAMP,'');
		if paccion='borrar' then -- se procede acctualizar el campo de borrado del documento
			update gd_documento_anexo set borrado='S' where codigo=pcodigo and documento=pcontenedor;
		end if;
		
		res:='ok';
		cod:=pcodigo;
	end if;
	return query select  res, cod;
	
       
 END;
 $$;


ALTER FUNCTION public.gd_reg_anexo_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, paccion character varying, pdir_fisica_documento character varying, pnombre_doc character varying, preferencia_doc character varying, pdir_virtual character varying, pextencion character varying, pfojas integer, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 232 (class 1255 OID 467283)
-- Name: gd_reg_atributos_documento(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.gd_reg_atributos_documento(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, ptipo_documento character varying, pnombre character varying, pobligatorio character varying, ptipo_dato character varying, porden numeric, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
	vcodigo varchar;
	i integer;
	vdatos_auditoria varchar;
	vpasa_validacion integer;
	vauditoria text;
	vcolumnas varchar[];
	vauditoria_des text;
	vauditoria_v varchar[];
	vres2 varchar;
	vauditoria_des_v varchar[];
	vauditoria_resul text;
 BEGIN
	BEGIN
		--codigo,nombre,sector,direccion,ruc,ruc_propietario,nombres_propietario,tipo_id_propietario,tipo,provincia,canton,parroquia,actividad,telefono,telefono_propietario,direccion_propietario 
		if pcodigo ='' then-- nuevo
			SELECT coalesce(max(cast(codigo as integer)),0) +1 as mayor into vcodigo FROM gd_atributos_documento ;
			IF NOT FOUND THEN
				res:='Error : no se calculo el nuevo codigo del grupo';
				cod:='';
				return query select  res, cod;
				return;
			END IF;
			Insert into gd_atributos_documento(codigo, tipo_documento, nombre, obligatorio,tipo_dato,orden)
			values(vcodigo,ptipo_documento, pnombre, pobligatorio,ptipo_dato,porden);
			---nueva auditoria 
			select gd_atributos_documento::text into vauditoria from gd_atributos_documento where codigo=vcodigo;
			insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'gd_atributos_documento','INSERT',CURRENT_TIMESTAMP,vauditoria);
			
			--insert into auditoria(usuario,n_usuario,accion,fecha_hora,datos) values(pusuario,pusuario,'INSERT ESTABLECIMIENTO' || vcodigo,CURRENT_TIMESTAMP,'');
			res:='NUEVO';
			cod:=vcodigo;
		else--actualizar
			--insert into auditoria(usuario,n_usuario,accion,fecha_hora,datos) values(pusuario,pusuario,'UPDATE ESTABLECIMIENTO ' || pcodigo,CURRENT_TIMESTAMP,'');
			--nueva auditoria
			select array(SELECT column_name::text FROM information_schema.columns WHERE table_name = 'gd_atributos_documento' order by ordinal_position) into vcolumnas;
			select array(select replace(replace(gd_atributos_documento::text,'(',''),')','') from gd_atributos_documento where codigo=pcodigo) into vauditoria_v;
			update gd_atributos_documento set nombre=pnombre,obligatorio=pobligatorio,tipo_dato=ptipo_dato,orden=porden
			where codigo=pcodigo;
			select array(select replace(replace(gd_atributos_documento::text,'(',''),')','') from gd_atributos_documento where codigo=pcodigo) into vauditoria_des_v ;
			vauditoria_resul='';
			FOR i IN 1..(array_length(vcolumnas, 1)) LOOP
				if vauditoria_v[i] <> vauditoria_des_v[i] then
					vauditoria_resul=vauditoria_resul || vcolumnas[i] || '(' || vauditoria_v[i] || ' -> ' || vauditoria_des_v[i] || ');';
				end if;
			END LOOP;
			if vauditoria_resul<>'' then
				insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'gd_atributos_documento','UPDATE_NEW',CURRENT_TIMESTAMP, vauditoria_resul);
			end if;
			res:='UPDATE';
			cod:=pcodigo;
		end if;
	EXCEPTION WHEN OTHERS THEN
		res:='ERROR';
		cod:=sqlerrm;
        --mensaje := mensaje || ' ******** El bloque de adentro, con errores';
		
	END;
	return query select  res, cod;
       
 END;
 $$;


ALTER FUNCTION public.gd_reg_atributos_documento(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, ptipo_documento character varying, pnombre character varying, pobligatorio character varying, ptipo_dato character varying, porden numeric, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 218 (class 1255 OID 467284)
-- Name: gd_reg_contenedor(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.gd_reg_contenedor(pusuario character varying, pempresa_act character varying, pcodigo character varying, pnombre character varying, pdescripcion character varying, ptipo character varying, pcontenedor_padre character varying, pestado character varying, pcustodio character varying, pborrado character varying, pcodificacion character varying, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
	vcodigo varchar; 
	vdatos_auditoria varchar;
	vauditoria text;
	vpasa_validacion integer;
	vpasa_validacion2 integer;
	vcolumnas varchar[];
	vauditoria_des text;
	vauditoria_v varchar[];
	vauditoria_des_v varchar[];
	vauditoria_resul text;
     
 BEGIN
        BEGIN
	--validamos si el usuario pertenece a la empresa actual en que se encuentra
	select count(*) into vpasa_validacion from sis_usuario where codigo=pusuario and empresa=pempresa_act;
	if vpasa_validacion = 0 then
		res:='Error : el usuario no pertence a la empresa actual';
		cod:='';
		return query select  res, cod;
		return;
	end if;
	--VALIDAR QUE SE PUEDA REGISTRAR Y MODIFICAR SOLO CONTENEDORES DE LA EMPRESA DEL USUARIO
	
	if get_puede_editar_contenido(pcontenedor_padre,pempresa_act) = 'NO' then
		res:='Error : el usuario no pertence a la empresa actual, no tiene privilegios para crear registros en el directorio';
		cod:='';
		return query select  res, cod;
		return;
	end if;
	--codigo,nombre,sector,direccion,ruc,ruc_propietario,nombres_propietario,tipo_id_propietario,tipo,provincia,canton,parroquia,actividad,telefono,telefono_propietario,direccion_propietario 
	if pcodigo ='' then-- nuevo
		SELECT coalesce(max(cast(codigo as integer)),0) +1 as mayor into vcodigo FROM gd_contenedor ;
		IF NOT FOUND THEN
			res:='Error : no se calculo el nuevo codigo del gd_contenedor';
			cod:='';
			return query select  res, cod;
			return;
		END IF;
		--select count(*) into vpasa_validacion from gd_contenedor where codigo=pcontenedor_padre and empresa=pempresa_act;
		--if vpasa_validacion = 0 then
		--	res:='Error : El usuario no tiene privilegios para editar este contenedor';
		--	cod:='';
		--	return query select  res, cod;
		--	return;
		--end if;
		INSERT INTO gd_contenedor(codigo,nombre,empresa,descripcion,tipo,contenedor_padre,estado,custodio,borrado,codificacion)
		values(vcodigo,pnombre,pempresa_act,pdescripcion,ptipo,pcontenedor_padre,pestado,pcustodio,pborrado,pcodificacion);
		---nueva auditoria 
		select gd_contenedor::text into vauditoria from gd_contenedor where codigo=vcodigo;
		insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'GD_CONTENEDOR','INSERT',CURRENT_TIMESTAMP,vauditoria);

		--insert into auditoria(usuario,n_usuario,accion,fecha_hora,datos) values(pusuario,pusuario,'INSERT ESTABLECIMIENTO' || vcodigo,CURRENT_TIMESTAMP,'');
		res:='NUEVO';
		cod:=vcodigo;
	else--actualizar
		--select count(*) into vpasa_validacion from gd_contenedor where codigo=pcodigo and empresa=pempresa_act;
		--if vpasa_validacion = 0 then
		--	res:='Error : El usuario no tiene privilegios para editar este contenedor';
		--	cod:='';
		--	return query select  res, cod;
		--	return;
		--end if;
		--validamos que el conetnedor solo pueda cambiar de tipo si no tiene contenidos
		SELECT count(*) into vpasa_validacion FROM gd_contenedor where codigo=pcodigo and empresa=pempresa_act and tipo<>ptipo ;
		if vpasa_validacion > 0 then
			SELECT count(*) into vpasa_validacion2 FROM gd_contenedor where contenedor_padre=pcodigo and empresa=pempresa_act and borrado='N';
			if vpasa_validacion2 > 0 then
				res:='Error : El contendor no puede cambiar de tipo, aun mantiene contenidos internos';
				cod:='';
				return query select  res, cod;
				return;
			end if;
		end if;
		--nueva auditoria
		--nueva auditoria
		select array(SELECT column_name::text FROM information_schema.columns WHERE table_name = 'gd_contenedor' order by ordinal_position) into vcolumnas;
		select array(select replace(replace(gd_contenedor::text,'(',''),')','') from gd_contenedor where codigo=pcodigo) into vauditoria_v;
		update gd_contenedor set nombre=pnombre,descripcion=pdescripcion,estado=pestado,custodio=pcustodio,tipo=ptipo,codificacion=pcodificacion
		where codigo=pcodigo;
		select array(select replace(replace(gd_contenedor::text,'(',''),')','') from gd_contenedor where codigo=pcodigo) into vauditoria_des_v ;
		vauditoria_resul='';
		FOR i IN 1..(array_length(vcolumnas, 1)) LOOP
			if vauditoria_v[i] <> vauditoria_des_v[i] then
				vauditoria_resul=vauditoria_resul || vcolumnas[i] || '(' || vauditoria_v[i] || ' -> ' || vauditoria_des_v[i] || ');';
			end if;
		END LOOP;
		if vauditoria_resul<>'' then
			insert into auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'GD_CONTENEDOR','UPDATE_NEW',CURRENT_TIMESTAMP, vauditoria_resul);
		end if;
		--insert into auditoria(usuario,n_usuario,accion,fecha_hora,datos) values(pusuario,pusuario,'UPDATE ESTABLECIMIENTO ' || pcodigo,CURRENT_TIMESTAMP,'');
		res:='UPDATE';
		cod:=pcodigo;
	end if;
	EXCEPTION WHEN OTHERS THEN
		res:='ERROR';
		cod:=sqlerrm;
        --mensaje := mensaje || ' ******** El bloque de adentro, con errores';
		
	END;
	return query select  res, cod;
       
 END;
 $$;


ALTER FUNCTION public.gd_reg_contenedor(pusuario character varying, pempresa_act character varying, pcodigo character varying, pnombre character varying, pdescripcion character varying, ptipo character varying, pcontenedor_padre character varying, pestado character varying, pcustodio character varying, pborrado character varying, pcodificacion character varying, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 217 (class 1255 OID 467286)
-- Name: gd_reg_documento(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.gd_reg_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, porigen character varying, pcodificacion character varying, ptipo character varying, pestado character varying, pproc_origen character varying, pdatos_documento text, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
     vcodigo varchar; 
     vdatos_auditoria varchar;
     vauditoria text;
     vauditoria_des text;
     vpasa_validacion integer;
     vmax_codificacion integer;
     codificacion_txt varchar;
     codi_txt varchar;
     verror varchar;
 BEGIN
	BEGIN
	select count(*) into vpasa_validacion from sis_usuario where codigo=pusuario and empresa=pempresa_act;
	if vpasa_validacion = 0 then
		res:='Error : el usuario no pertence a la empresa actual';
		cod:='';
		return query select  res, cod;
		return;
	end if;
	--validamos que los datos del documentos sean validos
	verror=gd_valida_datos_doc_tp(pdatos_documento);
	if verror <> '' then
		res:='ERROR';
		cod:=verror;
		return query select  res, cod;
		return;
	end if;
	--codigo,nombre,sector,direccion,ruc,ruc_propietario,nombres_propietario,tipo_id_propietario,tipo,provincia,canton,parroquia,actividad,telefono,telefono_propietario,direccion_propietario 
	if pcodigo ='' then-- nuevo
		SELECT coalesce(max(cast(codigo as integer)),0) +1 as mayor into vcodigo FROM gd_documento ;
		IF NOT FOUND THEN
			res:='Error : no se calculo el nuevo codigo del gd_contenedor';
			cod:='';
			return query select  res, cod;
			return;
		END IF;
		--validar si el usuario puede crear el documento
		select count(*) into vpasa_validacion from gd_contenedor where codigo=pcontenedor and empresa=pempresa_act;
			if vpasa_validacion = 0 then
				res:='Error : El usuario no tiene privilegios para crear documentos en el directorio -' || pempresa_act;
				cod:='';
				return query select  res, cod;
			return;
		end if;
		--validamos que exista el tipo de documento
		select count(*) into vpasa_validacion from gd_tipo_documento where codigo=ptipo;
			if vpasa_validacion = 0 then
				res:='Error : El tipo de Documento no se encuentra registrado';
				cod:='';
				return query select  res, cod;
			return;
		end if;
		--calculamos la nueva codificacion del documento dentro del folder
		SELECT coalesce(max(cast(codificacion as integer)),0) +1 as mayor into vmax_codificacion FROM gd_documento where borrado='N' and contenedor=pcontenedor;
		codi_txt='0000' || vmax_codificacion;
		codificacion_txt=substring(codi_txt from char_length( codi_txt ) - 3 for 4) ;
		
		INSERT INTO gd_documento(codigo,empresa,contenedor,tipo,estado,datos_documento,fecha_registro,origen,codificacion,proc_origen)
		values(vcodigo,pempresa_act,pcontenedor,ptipo,pestado,pdatos_documento,CURRENT_TIMESTAMP,porigen,codificacion_txt,pproc_origen);
		---nueva auditoria 
		select gd_documento::text into vauditoria from gd_documento where codigo=vcodigo  ;
		insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'GD_DOCUMENTO','INSERT',CURRENT_TIMESTAMP,vauditoria);

		--insert into auditoria(usuario,n_usuario,accion,fecha_hora,datos) values(pusuario,pusuario,'INSERT ESTABLECIMIENTO' || vcodigo,CURRENT_TIMESTAMP,'');
		res:='NUEVO';
		cod:=vcodigo;
	else--actualizar
		--validar si el usuario puede modificar el documento
		select count(*) into vpasa_validacion from gd_documento where codigo=pcodigo and empresa=pempresa_act;
			if vpasa_validacion = 0 then
			res:='Error : El usuario no tiene privilegios para editar este documento COD=' || pcodigo;
			cod:='';
			return query select  res, cod;
			return;
		end if;
		--nueva auditoria
		select gd_documento::text into vauditoria from gd_documento where codigo=pcodigo ;
		update gd_documento set datos_documento=pdatos_documento,origen=porigen,proc_origen=pproc_origen
		where codigo=pcodigo ;
		select gd_documento::text into vauditoria_des from gd_documento where codigo=pcodigo  ;
		if vauditoria<>vauditoria_des then
			insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'GD_DOCUMENTO','UPDATE',CURRENT_TIMESTAMP,'Antes ' || vauditoria || ' despues ' || vauditoria_des);
		end if;
		--insert into auditoria(usuario,n_usuario,accion,fecha_hora,datos) values(pusuario,pusuario,'UPDATE ESTABLECIMIENTO ' || pcodigo,CURRENT_TIMESTAMP,'');
		res:='UPDATE';
		cod:=pcodigo;
	end if;
	EXCEPTION WHEN OTHERS THEN
		res:='ERROR';
		cod:=sqlerrm;
        --mensaje := mensaje || ' ******** El bloque de adentro, con errores';
		
	END;
	return query select  res, cod;
       
 END;
 $$;


ALTER FUNCTION public.gd_reg_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, porigen character varying, pcodificacion character varying, ptipo character varying, pestado character varying, pproc_origen character varying, pdatos_documento text, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 233 (class 1255 OID 467288)
-- Name: gd_reg_empresa(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.gd_reg_empresa(pcodigo character varying, pmodulo character varying, pusuario character varying, pnombre character varying, pruc character varying, pdireccion character varying, pnomenclatura character varying, pdirectorio character varying, pempresa_padre character varying, ptipo character varying, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
	vcodigo varchar;
	i integer;
	vexiste_dir integer;
	vdatos_auditoria varchar;
	vauditoria text;
	vcolumnas varchar[];
	vauditoria_des text;
	vauditoria_v varchar[];
	vres2 varchar;
	vauditoria_des_v varchar[];
	vauditoria_resul text;
 BEGIN
	BEGIN
	vres2='';
	if pcodigo ='' then-- nuevo
		SELECT coalesce(max(cast(codigo as integer)),0) +1 as mayor into vcodigo FROM gd_empresa ;
		IF NOT FOUND THEN
			res:='Error : no se calculo el nuevo codigo de Empresa';
			cod:='';
			return query select  res, cod;
			return;
		END IF;
		--VALIDAR QUE EL DIRECTORIO DE LA EMPRESA NO LO TENGA OTRA EMPRESA
		SELECT count(directorio) into vexiste_dir FROM gd_empresa where directorio=pdirectorio;
		if vexiste_dir > 0 then
			res:='Error : Directorio en uso, no puede ser asignado a otra empresa';
			cod:='';
			return query select  res, cod;
			return;
		end if;
		Insert into gd_empresa (codigo, nombre,ruc,direccion,nomenclatura,directorio,empresa_padre,tipo)
		values(vcodigo,pnombre, pruc,pdireccion,pnomenclatura,pdirectorio,pempresa_padre,ptipo);
		
		---nueva auditoria 
		select gd_empresa::text into vauditoria from gd_empresa where codigo=vcodigo;
		insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'GD_EMPRESA','INSERT',CURRENT_TIMESTAMP,vauditoria);
		res:='NUEVO';
		cod:=vcodigo;
		--ACTUALIZAR LA EMPRESA DE LOS CONTENEDORES SEGUUN EL DIRECTORIO DE GD_EMPRESA
		if pdirectorio<>'' AND pdirectorio<>'1' AND pdirectorio<>'-1' then
				--update gd_contenedor set empresa=pcodigo where codigo=pdirectorio;
				update gd_contenedor set empresa=vcodigo where codigo in(select codi from get_directorio_padre_all(pdirectorio));
				update gd_documento set empresa=vcodigo where contenedor in(select codi from get_directorio_padre_all(pdirectorio) where rtipo='FO');
				vres2=' Entro direccion=' || pdirectorio;
		end if;
		
	else--actualizar
		--nueva auditoria
		select array(SELECT column_name::text FROM information_schema.columns WHERE table_name = 'gd_empresa' order by ordinal_position) into vcolumnas;
		select array(select replace(replace(gd_empresa::text,'(',''),')','') from gd_empresa where codigo=pcodigo) into vauditoria_v;
		update gd_empresa set nombre=pnombre,ruc=pruc,direccion=pdireccion,nomenclatura=pnomenclatura,empresa_padre=pempresa_padre,tipo=ptipo
		where codigo=pcodigo;
		select array(select replace(replace(gd_empresa::text,'(',''),')','') from gd_empresa where codigo=pcodigo) into vauditoria_des_v ;
		vauditoria_resul='';
		FOR i IN 1..(array_length(vcolumnas, 1)) LOOP
			if vauditoria_v[i] <> vauditoria_des_v[i] then
				vauditoria_resul=vauditoria_resul || vcolumnas[i] || '(' || vauditoria_v[i] || ' -> ' || vauditoria_des_v[i] || ');';
			end if;
		END LOOP;
		
		if vauditoria_resul<>'' then
			insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'GD_EMPRESA','UPDATE_NEW',CURRENT_TIMESTAMP, vauditoria_resul);
		end if;
		res:='UPDATE';
		cod:=pcodigo;
		--select * from get_directorio_padre_all('1')
		
	end if;
	EXCEPTION WHEN OTHERS THEN
		res:='ERROR';
		cod:=sqlerrm || ' - ' || pusuario;
        --mensaje := mensaje || ' ******** El bloque de adentro, con errores';
		
	END;
	return query select  res, cod;
       
 END;
 $$;


ALTER FUNCTION public.gd_reg_empresa(pcodigo character varying, pmodulo character varying, pusuario character varying, pnombre character varying, pruc character varying, pdireccion character varying, pnomenclatura character varying, pdirectorio character varying, pempresa_padre character varying, ptipo character varying, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 234 (class 1255 OID 467289)
-- Name: gd_reg_mover_contenedor(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.gd_reg_mover_contenedor(pusuario character varying, pempresa_act character varying, pcontenedor_padre character varying, pcodigos character varying, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
     vcodigos varchar[];
     vdatos varchar[];
     vcodigo varchar; 
     vcodigo_nivel_hijo integer; --variable para almacenar el nivel de los hijos que puede tener el contenedor 
     vcodigo_hijos_padre varchar; --variable para almacenar el nivel del los hijos del contenedor padre 
     vdatos_auditoria varchar;
     vauditoria_resul text;
     vauditoria text;
     vauditoria_des text;
     vnum_error INTEGER;
     vresul varchar;
     vpasa_validacion integer;
 BEGIN
	--validamos si el usuario pertenece a la empresa actual en que se encuentra
	select count(*) into vpasa_validacion from sis_usuario where codigo=pusuario and empresa=pempresa_act;
	if vpasa_validacion = 0 then
		res:='Error : el usuario no pertence a la empresa actual';
		cod:='';
		return query select  res, cod;
		return;
	end if;
	vresul='Datos registrados sin novedad';
	vnum_error=0;
	SELECT tp.hijos into vcodigo_hijos_padre FROM gd_contenedor co inner join gd_tipo_contenedor tp on co.tipo=tp.codigo where co.codigo=pcontenedor_padre;
	--codigo,nombre,sector,direccion,ruc,ruc_propietario,nombres_propietario,tipo_id_propietario,tipo,provincia,canton,parroquia,actividad,telefono,telefono_propietario,direccion_propietario 
	vcodigos := string_to_array(pcodigos,'|');
	FOR i IN 1..(array_length(vcodigos, 1)) LOOP
		vdatos := string_to_array(vcodigos[i],';');
		vcodigo=vdatos[1];
		--COMMPROBAMOS QUE EL NIVEL nuevo hijo corresponda al configurado
		--SELECT count(tp.codigo) into vcodigo_nivel_hijo FROM gd_contenedor co inner join gd_tipo_contenedor tp on co.tipo=tp.codigo where co.codigo=vcodigo and tp.codgo;
		SELECT count(tipo) into vcodigo_nivel_hijo FROM gd_contenedor where codigo=vcodigo and vcodigo_hijos_padre like '%'||tipo||'%';
		IF vcodigo_nivel_hijo<>0 THEN
			select contenedor_padre into vauditoria from gd_contenedor where codigo=vcodigo;
			update gd_contenedor set contenedor_padre= pcontenedor_padre where codigo=vcodigo;
			if vauditoria<>pcontenedor_padre then
				vauditoria_resul=vauditoria_resul || 'contenedor_padre (' || vauditoria || ' -> ' || pcontenedor_padre || ');';
				insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'GD_CONTENEDOR','UPDATE_NEW',CURRENT_TIMESTAMP, vauditoria_resul);
				--insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'GD_CONTENEDOR','UPDATE-MOVER',CURRENT_TIMESTAMP,'Antes ' || vauditoria || ' despues ' || vauditoria_des);
			end if;
		ELSE
			vnum_error=vnum_error + 1;
			vresul='Existen ' || vnum_error || ' objetos Que no se movieron, El contendor no admite el tipo de contenido.';
		END IF;
	END LOOP;
	res:=vresul;
	cod:='';
	return query select  res, cod;
       
 END;
 $$;


ALTER FUNCTION public.gd_reg_mover_contenedor(pusuario character varying, pempresa_act character varying, pcontenedor_padre character varying, pcodigos character varying, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 237 (class 1255 OID 467290)
-- Name: gd_reg_mover_documento(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.gd_reg_mover_documento(pusuario character varying, pempresa_act character varying, pcontenedor_padre character varying, pcodigos character varying, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
	vcodigos varchar[];
	vdatos varchar[]; 
	vcodigo varchar; 
	vtipo_hijo varchar;
	vtipo_padre varchar; 
	vcodigo_nivel_hijo integer; --variable para almacenar el nivel de los hijos que puede tener el contenedor 
	vcodigo_hijos_padre varchar; --variable para almacenar el nivel del los hijos del contenedor padre 
	vdatos_auditoria varchar;
	vresul varchar;
	vpasa_validacion integer;
	vnum_error INTEGER;
	vauditoria text;
	vauditoria_resul text;
     
 BEGIN
	--validamos si el usuario pertenece a la empresa actual en que se encuentra
	select count(*) into vpasa_validacion from sis_usuario where codigo=pusuario and empresa=pempresa_act;
	if vpasa_validacion = 0 then
		res:='Error : el usuario no pertence a la empresa actual';
		cod:='';
		return query select  res, cod;
		return;
	end if;
	vresul='Datos registrados sin novedad';
	vnum_error=0;
	--extraemos el tipo de contenedor
	SELECT tipo into vtipo_padre FROM gd_contenedor where codigo=pcontenedor_padre;
	if vtipo_padre<>'FO' then
		res:='Error: El contenedor destino no admite documentos';
		cod:='';
		return query select  res, cod;
		return;
	end if;
	--codigo,nombre,sector,direccion,ruc,ruc_propietario,nombres_propietario,tipo_id_propietario,tipo,provincia,canton,parroquia,actividad,telefono,telefono_propietario,direccion_propietario 
	vcodigos := string_to_array(pcodigos,'|');
	FOR i IN 1..(array_length(vcodigos, 1)) LOOP
		vdatos:=string_to_array(vcodigos[i],';');
		vcodigo=vdatos[1]; --codigo
		vtipo_hijo=vdatos[2]; --tipo
		if vtipo_hijo='DO' then 
			select contenedor into vauditoria from gd_documento where codigo=vcodigo;
			update gd_documento set contenedor= pcontenedor_padre where codigo=vcodigo;
			if vauditoria<>pcontenedor_padre then
				vauditoria_resul=vauditoria_resul || 'Contenedor (' || vauditoria || ' -> ' || pcontenedor_padre || ');';
				insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'GD_DOCUMENTO','UPDATE_NEW',CURRENT_TIMESTAMP, vauditoria_resul);
			end if;
		else
			vnum_error=vnum_error + 1;
			vresul='Existen ' || vnum_error || ' objetos Que no se movieron, El contendor no admite el tipo de contenido.';
		end if;
	END LOOP;
	res:=vresul;
	cod:='';
	return query select  res, cod;
       
 END;
 $$;


ALTER FUNCTION public.gd_reg_mover_documento(pusuario character varying, pempresa_act character varying, pcontenedor_padre character varying, pcodigos character varying, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 238 (class 1255 OID 467291)
-- Name: gd_reg_persona(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.gd_reg_persona(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pcedula character varying, papellido character varying, pnombre character varying, pdireccion character varying, ptelefono character varying, pcargo character varying, pcorreo character varying, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
	vcodigo varchar;
	i integer;
	vdatos_auditoria varchar;
	vpasa_validacion integer;
	vauditoria text;
	vcolumnas varchar[];
	vauditoria_des text;
	vauditoria_v varchar[];
	vres2 varchar;
	vauditoria_des_v varchar[];
	vauditoria_resul text;
     
 BEGIN
	--select count(*) into vpasa_validacion from sis_usuario where codigo=pusuario and empresa=pempresa_act;
	--if vpasa_validacion = 0 then
	--	res:='Error : el usuario no pertence a la empresa actual';
	--	cod:='';
	--	return query select  res, cod;
	--	return;
	--end if;
	BEGIN
	if pcodigo ='' then-- nuevo
		SELECT coalesce(max(cast(codigo as integer)),0) +1 as mayor into vcodigo FROM gd_persona ;
		IF NOT FOUND THEN
			res:='Error : no se calculo el nuevo codigo del personal';
			cod:='';
			return query select  res, cod;
			return;
		END IF;
		Insert into gd_persona (codigo,cedula,apellido,nombre,direccion,telefono,cargo,empresa,usuario,correo)
		values(vcodigo,pcedula,papellido,pnombre,pdireccion,ptelefono,pcargo,pempresa_act,pusuario,pcorreo);
		select gd_persona::text into vauditoria from gd_persona where codigo=vcodigo;
		insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'GD_PERSONA','INSERT',CURRENT_TIMESTAMP,vauditoria);
		res:='NUEVO';
		cod:=vcodigo;
	else--actualizar
		--nueva auditoria
		select array(SELECT column_name::text FROM information_schema.columns WHERE table_name = 'gd_persona' order by ordinal_position) into vcolumnas;
		select array(select replace(replace(gd_persona::text,'(',''),')','') from gd_persona where codigo=pcodigo) into vauditoria_v;
		update gd_persona set cedula=pcedula,apellido=papellido,nombre=pnombre,direccion=pdireccion,telefono=ptelefono,cargo=pcargo,correo=pcorreo
		where codigo=pcodigo;
		select array(select replace(replace(gd_persona::text,'(',''),')','') from gd_persona where codigo=pcodigo) into vauditoria_des_v ;
		vauditoria_resul='';
		FOR i IN 1..(array_length(vcolumnas, 1)) LOOP
			if vauditoria_v[i] <> vauditoria_des_v[i] then
				vauditoria_resul=vauditoria_resul || vcolumnas[i] || '(' || vauditoria_v[i] || ' -> ' || vauditoria_des_v[i] || ');';
			end if;
		END LOOP;
		if vauditoria_resul<>'' then
			insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'GD_EMPRESA','UPDATE_NEW',CURRENT_TIMESTAMP, vauditoria_resul);
		end if;
		res:='UPDATE';
		cod:=pcodigo;
	end if;
	--return query select  res, cod;
	--when exception unique_violation then 
	--EXCEPTION WHEN unique_violation THEN
	--exception
		--res:=MESSAGE_TEXT;
		--cod:='nada';
		--return query select  res, cod;
		--raise notice 'error';
	--WHEN OTHERS THEN
	--end;
	EXCEPTION WHEN OTHERS THEN
		res:='ERROR';
		cod:=sqlerrm;
        --mensaje := mensaje || ' ******** El bloque de adentro, con errores';
		
	END;
	return query select  res, cod;
 END;
 $$;


ALTER FUNCTION public.gd_reg_persona(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pcedula character varying, papellido character varying, pnombre character varying, pdireccion character varying, ptelefono character varying, pcargo character varying, pcorreo character varying, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 239 (class 1255 OID 467292)
-- Name: gd_reg_registro_consulta(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.gd_reg_registro_consulta(pmodulo character varying, pusuario character varying, pdocumento character varying, panexo character varying, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
	vcodigo varchar;
	     
 BEGIN
	--esta funcion solo registra las consultas que se le realizan a un anexo, por lo que esto no se podra actualizar una vez que sea registrado
	
	SELECT coalesce(max(cast(codigo as integer)),0) +1 as mayor into vcodigo FROM gd_registro_consultas where anexo=panexo and documento= pdocumento ;
	IF NOT FOUND THEN
		res:='Error : no se calculo el nuevo codigo del personal';
		cod:='';
		return query select  res, cod;
		return;
	END IF;
	Insert into gd_registro_consultas (codigo, anexo, usuario, fecha_hora, documento)
	values(vcodigo, panexo, pusuario, CURRENT_TIMESTAMP, pdocumento);
	res:='ok';
	cod:=vcodigo;
	return query select  res, cod;
	
 END;
 $$;


ALTER FUNCTION public.gd_reg_registro_consulta(pmodulo character varying, pusuario character varying, pdocumento character varying, panexo character varying, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 240 (class 1255 OID 467293)
-- Name: gd_reg_tipo_documento(character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.gd_reg_tipo_documento(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pabreviatura character varying, pnombre character varying, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
     vcodigo varchar;
	i integer;
	vdatos_auditoria varchar;
	vpasa_validacion integer;
	vauditoria text;
	vcolumnas varchar[];
	vauditoria_des text;
	vauditoria_v varchar[];
	vres2 varchar;
	vauditoria_des_v varchar[];
	vauditoria_resul text;
 BEGIN
	BEGIN
		--validamos si el usuario pertenece a la empresa actual en que se encuentra
		select count(*) into vpasa_validacion from sis_usuario where codigo=pusuario and empresa=pempresa_act;
		if vpasa_validacion = 0 then
			res:='Error : el usuario no pertence a la empresa actual';
			cod:='';
			return query select  res, cod;
			return;
		end if;
		--codigo,nombre,sector,direccion,ruc,ruc_propietario,nombres_propietario,tipo_id_propietario,tipo,provincia,canton,parroquia,actividad,telefono,telefono_propietario,direccion_propietario 
		if pcodigo ='' then-- nuevo
			SELECT coalesce(max(cast(codigo as integer)),0) +1 as mayor into vcodigo FROM gd_tipo_documento ;
			IF NOT FOUND THEN
				res:='Error : no se calculo el nuevo codigo del grupo';
				cod:='';
				return query select  res, cod;
				return;
			END IF;
			Insert into gd_tipo_documento (codigo,nombre,abreviatura) values(vcodigo,pnombre,pabreviatura);
			---nueva auditoria 
			select gd_tipo_documento::text into vauditoria from gd_tipo_documento where codigo=vcodigo;
			insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'gd_tipo_documento','INSERT',CURRENT_TIMESTAMP,vauditoria);
			
			--insert into auditoria(usuario,n_usuario,accion,fecha_hora,datos) values(pusuario,pusuario,'INSERT ESTABLECIMIENTO' || vcodigo,CURRENT_TIMESTAMP,'');
			res:='NUEVO';
			cod:=vcodigo;
		else--actualizar
			--insert into auditoria(usuario,n_usuario,accion,fecha_hora,datos) values(pusuario,pusuario,'UPDATE ESTABLECIMIENTO ' || pcodigo,CURRENT_TIMESTAMP,'');
			--nueva auditoria
			select array(SELECT column_name::text FROM information_schema.columns WHERE table_name = 'gd_tipo_documento' order by ordinal_position) into vcolumnas;
			select array(select replace(replace(gd_tipo_documento::text,'(',''),')','') from gd_tipo_documento where codigo=pcodigo) into vauditoria_v;
			update gd_tipo_documento set nombre=pnombre,abreviatura=pabreviatura where codigo=pcodigo;
			select array(select replace(replace(gd_tipo_documento::text,'(',''),')','') from gd_tipo_documento where codigo=pcodigo) into vauditoria_des_v ;
			vauditoria_resul='';
			FOR i IN 1..(array_length(vcolumnas, 1)) LOOP
				if vauditoria_v[i] <> vauditoria_des_v[i] then
					vauditoria_resul=vauditoria_resul || vcolumnas[i] || '(' || vauditoria_v[i] || ' -> ' || vauditoria_des_v[i] || ');';
				end if;
			END LOOP;
			if vauditoria_resul<>'' then
				insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'gd_tipo_documento','UPDATE_NEW',CURRENT_TIMESTAMP, vauditoria_resul);
			end if;
			res:='UPDATE';
			cod:=pcodigo;
		end if;
	EXCEPTION WHEN OTHERS THEN
		res:='ERROR';
		cod:=sqlerrm;
        --mensaje := mensaje || ' ******** El bloque de adentro, con errores';
		
	END;
	return query select  res, cod;
       
 END;
 $$;


ALTER FUNCTION public.gd_reg_tipo_documento(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pabreviatura character varying, pnombre character varying, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 241 (class 1255 OID 467294)
-- Name: gd_valida_datos_doc_tp(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.gd_valida_datos_doc_tp(pvalor text) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
 DECLARE
      vregistros varchar[];
      vdatos varchar[];
      vcodigo date;
      verror varchar;
 BEGIN
	BEGIN
		verror='';
		vregistros := string_to_array(pvalor,'|');
		FOR i IN 1..(array_length(vregistros, 1)) LOOP
			vdatos := string_to_array(vregistros[i],';');
			--1=codig atributo,2=valor, 3=tipo de dato
			if vdatos[3]='FE' then 
				if es_fecha(vdatos[2])=false then 
					verror=verror || 'Fecha invalida<br>'; 
				else --validar que la fecha no sea superior a la actual
					if cast(vdatos[2] as date) >= CURRENT_TIMESTAMP then
						verror=verror || 'Fecha invalida superior a la fecha actual del sistema<br>'; 
					end if;
				end if; 
			end if;			
			if vdatos[3]='NU' then if es_numero(vdatos[2])=false then verror=verror || 'Nuero incorrecto<br>'; end if; end if;
		        if vdatos[3]='DE' then if es_numero(vdatos[2])=false then verror=verror || 'Nuero incorrecto<br>'; end if; end if;
		        
		END LOOP;
				
	EXCEPTION WHEN OTHERS THEN
		verror=sqlerrm;		
	END;
	return verror;
	--select es_numero('9999999999999999999999');
	--'70;MUÑOS RAMOS MELANIE SOFIA ;TC|69;1312506528;TC|71;14/11/2024;FE|72;INTELECTUAL ;TC|73;87%;TC|74;MUY GRAVE;TC'
	--select case when cast('11/12/2024' as date) >= CURRENT_TIMESTAMP then 'SI' else 'NO' end
	--select gd_valida_datos_doc_tp('70;MUÑOS RAMOS MELANIE SOFIA ;TC|69;1312506528;TC|71;14/11/2024;FE|72;INTELECTUAL ;TC|73;87%;TC|74;MUY GRAVE;TC')
 END;
 $$;


ALTER FUNCTION public.gd_valida_datos_doc_tp(pvalor text) OWNER TO postgres;

--
-- TOC entry 219 (class 1255 OID 467295)
-- Name: get_calcula_codificacion(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_calcula_codificacion(OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
      folder RECORD;
      documentos RECORD;
      codi integer;
      codificacion_txt varchar;
      codi_txt varchar;
      cant integer;
 BEGIN
	cant=0;
	FOR folder IN SELECT codigo from gd_contenedor where borrado='N'order by cast(codigo as integer) LOOP
		codi=1;
		FOR documentos IN SELECT codigo from gd_documento where contenedor=folder.codigo and borrado='N' order by cast(codigo as integer) LOOP
			codificacion_txt='0000' || codi;
			codi_txt=substring(codificacion_txt from char_length( codificacion_txt ) - 3 for 4) ;
			update gd_documento set codificacion=codi_txt where codigo=documentos.codigo;
			codi=codi + 1;
		END LOOP;
		cant=cant + codi;
	END LOOP;
	res='Salio';
	cod=cant;
	return query select  res, cod;
	return;
	-- select * from get_contenido_directorio('10','DO')
	--select  substring('0000' || 15 from char_length( '0000' || 15 ) - 3 for 4) 
	-- select * from get_calcula_codificacion()
 END;
 $$;


ALTER FUNCTION public.get_calcula_codificacion(OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 242 (class 1255 OID 467296)
-- Name: get_contenido_directorio(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_contenido_directorio(pcodigo character varying, ptipo character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
 DECLARE
      mi_nombre varchar;
      mi_hijo varchar;
      fila RECORD;
      hijos RECORD;
      resul integer;
      vcantidad_tipo integer;
 BEGIN
	resul=0;
	select count(tipo) into vcantidad_tipo from gd_contenedor where activo='S' and contenedor_padre=pcodigo and tipo=ptipo;
	resul=vcantidad_tipo;
	FOR hijos IN SELECT codigo,tipo from gd_contenedor where activo='S' and contenedor_padre=pcodigo LOOP
		if hijos.tipo='FO' then
			if ptipo='DO' then
				select count(tipo) into vcantidad_tipo from gd_documento where borrado='N' and contenedor=hijos.codigo;
				resul=resul + vcantidad_tipo;
			end if;
			if ptipo='AN' then --anexos
				select count(codigo) into vcantidad_tipo from gd_documento_anexo where borrado='N' and documento in (select codigo from gd_documento where borrado='N' and contenedor=hijos.codigo);
				resul=resul + vcantidad_tipo;
			end if;
		else
			resul=resul + get_contenido_directorio(hijos.codigo,ptipo);
		end if;
	
	END LOOP;
	return resul;
	-- select * from get_contenido_directorio('10','DO')
 END;
 $$;


ALTER FUNCTION public.get_contenido_directorio(pcodigo character varying, ptipo character varying) OWNER TO postgres;

--
-- TOC entry 243 (class 1255 OID 467297)
-- Name: get_directorio(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_directorio(pcodigo character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
 DECLARE
      mi_nombre varchar;
     mi_padre varchar;
 BEGIN

	if pcodigo='-1' then
		return '/';
	else													          
		select contenedor_padre,nombre into mi_padre,mi_nombre from gd_contenedor where borrado='N' and  codigo=pcodigo and tipo in('ZO','CO','HO','DI','CS','DP','PO','AR','FO','ES','CA','AC');
		if mi_padre<>'-1' then
			return get_directorio(mi_padre) || '/' || mi_nombre;
		else
			return '/' || mi_nombre;
		end if;
	end if;
	-- select * from get_directorio('10')
 END;
 $$;


ALTER FUNCTION public.get_directorio(pcodigo character varying) OWNER TO postgres;

--
-- TOC entry 220 (class 1255 OID 467298)
-- Name: get_directorio_documento(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_directorio_documento(pcodigo character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
 DECLARE
      mi_nombre varchar;
     mi_padre varchar;
 BEGIN

	select contenedor_padre,nombre into mi_padre,mi_nombre from gd_contenedor where codigo=pcodigo ;
	if mi_padre<>'-1' then
		return get_directorio_documento(mi_padre) || '/' || mi_nombre;
	else
		return mi_nombre;
	end if;
	-- select * from get_directorio_documento('1')
 END;
 $$;


ALTER FUNCTION public.get_directorio_documento(pcodigo character varying) OWNER TO postgres;

--
-- TOC entry 236 (class 1255 OID 467299)
-- Name: get_directorio_padre(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_directorio_padre(ppadre character varying, OUT codi character varying, OUT direc character varying, OUT rtipo character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
       fila RECORD;
       hijos RECORD;
       
 BEGIN

	--select codigo,contenedor_padre,nombre into mi_padre,mi_nombre from gd_contenedor where codigo=pcodigo and tipo in('ZO','HO','DI','CS');
	IF ppadre='-1' then
		codi='-1';
		direc='/';
		rtipo='RZ';
		return query select codi,direc,rtipo;
	end if;
	
	FOR fila IN SELECT codigo,tipo from gd_contenedor where borrado='N' and contenedor_padre=ppadre and  tipo in('ZO','CO','HO','DI','CS','DP','PO','AR') order by nombre LOOP
		codi=fila.codigo;
		direc=get_directorio(fila.codigo);
		rtipo=fila.tipo;
		return query select codi,direc,rtipo;
		FOR hijos IN SELECT hi.codi as codi2,hi.direc as direc2, hi.rtipo as rtipo2 from get_directorio_padre(fila.codigo) hi LOOP
			codi=hijos.codi2;
			direc=hijos.direc2;
			rtipo=hijos.rtipo2;
			return query select codi,direc,rtipo;
		END LOOP;
	
	END LOOP;
	-- select * from get_directorio_padre('1')
 END;
 $$;


ALTER FUNCTION public.get_directorio_padre(ppadre character varying, OUT codi character varying, OUT direc character varying, OUT rtipo character varying) OWNER TO postgres;

--
-- TOC entry 235 (class 1255 OID 467300)
-- Name: get_directorio_padre_all(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_directorio_padre_all(ppadre character varying, OUT codi character varying, OUT direc character varying, OUT rtipo character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
       fila RECORD;
       hijos RECORD;
       
 BEGIN

	--select codigo,contenedor_padre,nombre into mi_padre,mi_nombre from gd_contenedor where codigo=pcodigo and tipo in('ZO','HO','DI','CS');
	IF ppadre='-1' then
		codi='-1';
		direc='/';
		rtipo='RZ';
		return query select codi,direc,rtipo;
	end if;
	
	FOR fila IN SELECT codigo,tipo from gd_contenedor where borrado='N' and contenedor_padre=ppadre and  tipo in('ZO','CO','HO','DI','CS','DP','PO','AR','FO','ES','CA','AC') order by nombre LOOP
		codi=fila.codigo;
		direc=get_directorio(fila.codigo);
		rtipo=fila.tipo;
		return query select codi,direc,rtipo;
		FOR hijos IN SELECT hi.codi as codi2,hi.direc as direc2, hi.rtipo as rtipo2 from get_directorio_padre_all(fila.codigo) hi LOOP
			codi=hijos.codi2;
			direc=hijos.direc2;
			rtipo=hijos.rtipo2;
			return query select codi,direc,rtipo;
		END LOOP;
	
	END LOOP;
	-- select * from get_directorio_padre_all('-1')
 END;
 $$;


ALTER FUNCTION public.get_directorio_padre_all(ppadre character varying, OUT codi character varying, OUT direc character varying, OUT rtipo character varying) OWNER TO postgres;

--
-- TOC entry 213 (class 1255 OID 467301)
-- Name: get_numero(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_numero(pvalor character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $$
 DECLARE
      vresultado integer;
     mi_padre varchar;
 BEGIN
	BEGIN
		vresultado = to_number(pvalor,'999999999999999999');
	EXCEPTION WHEN OTHERS THEN
		vresultado=0;		
	END;
	return vresultado;
	--select get_numero('122112222222222');
 END;
 $$;


ALTER FUNCTION public.get_numero(pvalor character varying) OWNER TO postgres;

--
-- TOC entry 244 (class 1255 OID 467302)
-- Name: get_puede_editar_contenido(character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_puede_editar_contenido(pcontenedor character varying, pempresa character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
 DECLARE
      vtipo_empresa varchar;
      vempresa varchar;
      vexiste integer;
      vresul varchar;
 BEGIN

	select tipo_empresa into vtipo_empresa from gd_tipo_contenedor where codigo=(select tipo from gd_contenedor where codigo=pcontenedor) ;
	if vtipo_empresa = 'SI' then -- buscamos la empresa en gd_empresa
		--valirdar si existe la empresa caso contrario buscar la empresa en el contenedor
		select count(*) into vexiste from gd_empresa where borrado='N' and  directorio=pcontenedor;
		if vexiste = 1 then -- si existe la empresa
			select codigo into vempresa from gd_empresa where directorio=pcontenedor;
		else
			select empresa into vempresa from gd_contenedor where codigo=pcontenedor;
		end if;
	else
		select empresa into vempresa from gd_contenedor where codigo=pcontenedor;
	end if;
	--select codigo into vempresa2 from gd_empresa where directorio=pcontenedor; 
	if vempresa = pempresa then
		vresul='SI';
	else
		vresul='NO';
	end if;
	return vresul;
	-- select get_puede_editar_contenido('2340','29') 2340 EMPRESA=29
 END;
 $$;


ALTER FUNCTION public.get_puede_editar_contenido(pcontenedor character varying, pempresa character varying) OWNER TO postgres;

--
-- TOC entry 247 (class 1255 OID 467303)
-- Name: sis_accesos_rol_usuario(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sis_accesos_rol_usuario(pusuario character varying, ptabla character varying, pmodulo character varying, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
     vrol varchar; --almacenamos el roll del usuario
     vempresa varchar; --almacenamos la empresa a la que corresponde el usuario
     vfila RECORD;
	vtipo_rol varchar;
 BEGIN
 	select rol,empresa into vrol,vempresa from sis_usuario where codigo=pusuario;
 	select mostrar into vtipo_rol from sis_rol_usuario where codigo=vrol;
	-- si rol = 1 es administrador de debe acceder a todas la empresas
	-- si rol = 15 es un TICs ZONAL deben aparecer solo las empresas de la zona
	-- si rol = 16 es un TICs DISTRITAL solo debe aparece la empresa del distrito
	-- si no esta entre esos codigo no se debe poder acceder a nada
	res='SI';
	--res=vrol;
	--cod=vtipo_rol;
	--return query select  res, cod;
	if pmodulo ='gd_empresa' then-- es el caso de la modulo empresa
		if vrol= '1' then
			res='SI';cod='';
			return query select  res, cod;
		else
			res='NO';
			cod='';
			return query select  res, cod;
		end if;
	end if;

	if ptabla ='gd_empresa' then-- es el caso de la tabla empresa
		if vrol= '1' then -- ADMINISTRADOR
			FOR vfila IN SELECT codigo FROM gd_empresa LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		end if;
		if vrol= '15' then -- tics zonal select codigo from gd_empresa where empresa_padre=(select empresa_padre from gd_empresa where codigo=vempresa)
			FOR vfila IN SELECT codigo FROM gd_empresa where borrado='N' and empresa_padre=(select case tipo when 'ZO' then codigo else empresa_padre end as codi from gd_empresa where codigo=vempresa) or codigo=vempresa LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		end if;
		if vrol= '16' then -- tics distrittal
			FOR vfila IN SELECT codigo FROM gd_empresa where codigo=vempresa LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		end if;
		if res='SI' then res='NO';cod='';return query select  res, cod; end if;
	end if;
	if ptabla ='gd_empresa_inf' then-- es el caso de la tabla empresa
		if vtipo_rol= 'N' then -- USUARIO NACIONAL
			FOR vfila IN SELECT codigo FROM gd_empresa LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		end if;
		if vtipo_rol= 'Z' then -- tics zonal select codigo from gd_empresa where empresa_padre=(select empresa_padre from gd_empresa where codigo=vempresa)
			FOR vfila IN SELECT codigo FROM gd_empresa where borrado='N' and empresa_padre=(select case tipo when 'ZO' then codigo else empresa_padre end as codi from gd_empresa where codigo=vempresa) or codigo=vempresa LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		end if;
		if vtipo_rol= 'D' then -- tics distrittal U HOSPITAL
			FOR vfila IN SELECT codigo FROM gd_empresa where codigo=vempresa LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		end if;
		if res='SI' then res='NO';cod='';return query select  res, cod; end if;
	end if;
	if ptabla ='gd_empresa_tipo' then-- es el caso de la tabla empresa - se utiliza en modulo de empresa en opcion de emprsa_padre
		if vrol= '1' then -- ADMINISTRADOR
			FOR vfila IN SELECT codigo FROM gd_empresa LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		end if;
		if vrol= '15' then -- tics zonal
			FOR vfila IN SELECT codigo FROM gd_empresa where codigo=(select case tipo when 'ZO' then codigo else empresa_padre end as codi from gd_empresa where codigo=vempresa) LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		end if;
		if vrol= '16' then -- tics distrittal
			FOR vfila IN SELECT codigo FROM gd_empresa where codigo=vempresa or empresa_padre=vempresa LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		end if;
		if res='SI' then res='NO';cod='';return query select  res, cod; end if;
	end if;
	if ptabla ='sis_rol_usuario' then-- es el caso de la de roles solo se mostraran en caso de que el suaurio se tipo administrador
		if vrol= '1' then -- ADMINISTRADOR
			FOR vfila IN SELECT codigo FROM sis_rol_usuario LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		else
			res='NO';
			cod='';
			return query select  res, cod;
		end if;
	end if;
	if ptabla ='gd_persona' then-- es el caso de la tabla gd_persona todos los roles de tipo administrador tendran acceso a todos los funcionarios
		if vrol= '1' or vrol= '15' or vrol = '16' then -- ADMINISTRADOR
			FOR vfila IN SELECT codigo FROM gd_persona LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		else
			res='NO';
			cod='';
			return query select  res, cod;
		end if;
		--if res='SI' then res='NO';cod='';return query select  res, cod; end if;
	end if;
	if ptabla ='sis_usuario' then-- es el caso de la tabla empresa
		if vrol= '1' then -- ADMINISTRADOR
			FOR vfila IN SELECT codigo FROM sis_usuario LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		end if;
		if vrol= '15' then -- tics zonal
			FOR vfila IN SELECT codigo FROM sis_usuario where rol in(select codigo from sis_rol_usuario where mostrar in ('Z','D') ) 	AND ( empresa in (select codigo from gd_empresa where empresa_padre=(select case tipo when 'ZO' then codigo else empresa_padre end as codi from gd_empresa where codigo=vempresa)) or empresa=vempresa ) LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		end if;
		if vrol= '16' then -- tics distrittal
			FOR vfila IN SELECT codigo FROM sis_usuario where (rol in(select codigo from sis_rol_usuario where mostrar in ('D') )) or  empresa=vempresa LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		end if;
		if res='SI' then res='NO';cod='';return query select  res, cod; end if;
	end if;
	if ptabla ='sis_rol_usuario_tipo' then-- es el caso de la tabla de roles - utiliza en el modulo de usuarios en la opcion de escoger roles
		if vrol= '1' then -- ADMINISTRADOR
			FOR vfila IN SELECT codigo FROM sis_rol_usuario LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		end if;
		if vrol= '15' then -- tics zonal
			FOR vfila IN SELECT codigo FROM sis_rol_usuario where codigo not in('1') LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		end if;
		if vrol= '16' then -- tics distrittal
			FOR vfila IN SELECT codigo FROM sis_rol_usuario where codigo in('13','16','9') LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		end if;
		if res='SI' then res='NO';cod='';return query select  res, cod; end if;
	end if;

	if ptabla ='sis_modulos' or ptabla ='gd_modulos' then-- es el caso de la de roles solo se mostraran en caso de que el suaurio se tipo administrador
		if vrol= '1' then -- ADMINISTRADOR
			FOR vfila IN SELECT codigo FROM sis_modulos LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		else
			res='NO';
			cod='';
			return query select  res, cod;
		end if;
	end if;
	
	if ptabla ='sis_configuracion' or ptabla='gd_sistema' then-- es el caso de la de roles solo se mostraran en caso de que el suaurio se tipo administrador
		if vrol= '1' then -- ADMINISTRADOR
			FOR vfila IN SELECT codigo FROM sis_configuracion LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		else
			res='NO';
			cod='';
			return query select  res, cod;
		end if;
	end if;
	
	if ptabla ='gd_tipo_contenedor' then-- es el caso de la de roles solo se mostraran en caso de que el suaurio se tipo administrador
		if vrol= '1' then -- ADMINISTRADOR
			FOR vfila IN SELECT codigo FROM gd_tipo_contenedor LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		else
			res='NO';
			cod='';
			return query select  res, cod;
		end if;
	end if;
	if ptabla ='gd_tipo_documento' then-- es el caso de la de roles solo se mostraran en caso de que el suaurio se tipo administrador
		if vrol= '1' or vrol= '8' or vrol= '12' then -- ADMINISTRADOR o RESPONSABLE ARCHIVO ZONAL o SECRETARIA GENERAL
			FOR vfila IN SELECT codigo FROM gd_tipo_documento LOOP
				res='';
				cod=vfila.codigo;
				return query select  res, cod;	
			END LOOP;
		else
			res='NO';
			cod='';
			return query select  res, cod;
		end if;
	end if;
	if res='SI' then res='';cod='';return query select  res, cod; end if;
	return; -- query select  res, cod;
	--select * from sis_accesos_rol_usuario('2','gd_empresa_inf','')
       
 END;
 $$;


ALTER FUNCTION public.sis_accesos_rol_usuario(pusuario character varying, ptabla character varying, pmodulo character varying, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 245 (class 1255 OID 467304)
-- Name: sis_genera_menu(character varying, character varying, integer, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sis_genera_menu(pcodigo character varying, ppadre character varying, nivel integer, pdirec character varying, OUT res character varying, OUT codi character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
DECLARE    
	fila RECORD;
	fila2 RECORD;
	fila3 RECORD;
BEGIN
	codi:='';
	IF nivel=0 THEN
		res:='<li data-options="iconCls:''app_network'',state:''open''"><span>Sistema Inventario</span><ul>';
		return query select res,codi;
		FOR fila3 IN select mo3.res as res3 from sis_genera_menu(pcodigo,'-1',1,pdirec) AS mo3 LOOP
					res:=fila3.res3;
					return Query Select res,codi;
		END LOOP;
		res:='</ul></li>';
		return query select res,codi;
	
	ELSE		
		IF nivel=1 THEN --
			FOR fila IN SELECT codigo, nombre,dir_img from sis_modulos where padre='-1' and codigo<>'-1' and tipo='M' and codigo in(select distinct cod from sis_get_modulos_roll(pcodigo))  order by orden LOOP
				res:='<li data-options="iconCls:''' || fila.dir_img ||''',state:''closed''"><span>'|| fila.nombre||'</span><ul>';
				--res:='<li class="current" > <a href="javascript:void(0)" ><img  src=''' || pdirec || fila.dir_img ||''' style=" position:absolute;  border:none; top:3px; left:4px; width: 20px; height:20;">'|| fila.nombre||'</a><ul>';
				return query select res,codi;
				FOR fila2 IN select mo.res as res2 from sis_genera_menu(pcodigo,fila.codigo,2,pdirec) as mo LOOP
					res:=fila2.res2;
					return Query Select res,codi;
				END LOOP;
				res:='</ul></li>';
				return Query Select res,codi;
			END LOOP;
		ELSE --class="current"
			FOR fila IN SELECT pagina, nombre,codigo,tipo,dir_img,referencia FROM sis_modulos where padre=ppadre and codigo in(select distinct cod from sis_get_modulos_roll(pcodigo)) order by orden  LOOP
				res:='<li data-options="iconCls:''' || fila.dir_img ||''',state:''closed''"><span><a href="javascript:void(0)"';
				IF fila.tipo='I' then
				 res:='<li data-options="iconCls:''' || fila.dir_img ||'''"><span><a href="javascript:void(0)"';
				 res:=res || 'onclick="Muestrac_Contenido_principal(''' || fila.pagina ||''',''' || fila.referencia ||''')"';
				end if;
				res:=res || '>'||fila.nombre ||'</a></span>';
				return query select res,codi;
				if fila.tipo='M' then	
					res:='<ul>';
					return query select res,codi;
					FOR fila2 IN select mo.res as res2 from sis_genera_menu(pcodigo,fila.codigo,2,pdirec) AS mo LOOP
						res:=fila2.res2;
						return Query Select res,codi;
					END LOOP;
					res:='</ul>';
					return query select res,codi;
				end if;
				res:='</li>';
				return Query Select res,codi;
			END LOOP;
		END IF;
	END IF;
	RETURN;
	-- select * from genera_menu('1','-1',0,'archivo_virtual')
END;
$$;


ALTER FUNCTION public.sis_genera_menu(pcodigo character varying, ppadre character varying, nivel integer, pdirec character varying, OUT res character varying, OUT codi character varying) OWNER TO postgres;

--
-- TOC entry 246 (class 1255 OID 467305)
-- Name: sis_get_modulos_roll(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sis_get_modulos_roll(pcodigo character varying) RETURNS SETOF public.codigos
    LANGUAGE plpgsql
    AS $$
DECLARE    
	ret_row RECORD;
	ret_row2 RECORD;
	ret_row3 RECORD;
	ret_row4 RECORD;
	ret_row5 RECORD;
BEGIN
    FOR ret_row IN SELECT modulo FROM sis_modulos_roll where roll=pcodigo and acceso='1' LOOP
	FOR ret_row2 IN SELECT padre FROM sis_modulos where codigo<>'-1' and codigo=ret_row.modulo LOOP
		FOR ret_row3 IN SELECT padre FROM sis_modulos where codigo<>'-1' and codigo=ret_row2.padre LOOP
			FOR ret_row4 IN SELECT padre FROM sis_modulos where codigo<>'-1' and codigo=ret_row3.padre LOOP
				FOR ret_row5 IN SELECT padre FROM sis_modulos where codigo<>'-1' and codigo=ret_row4.padre LOOP
					RETURN NEXT ret_row5;
				END LOOP;
				RETURN NEXT ret_row4;
			END LOOP;
			RETURN NEXT ret_row3;
		END LOOP;
		RETURN NEXT ret_row2;
	END LOOP;
        RETURN NEXT ret_row;
    END LOOP;
    RETURN;
END;
$$;


ALTER FUNCTION public.sis_get_modulos_roll(pcodigo character varying) OWNER TO postgres;

--
-- TOC entry 221 (class 1255 OID 467306)
-- Name: sis_mi_acendencia(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sis_mi_acendencia(pcodigo character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
 DECLARE
      mi_nombre varchar;
     mi_padre varchar;
 BEGIN

	select padre,nombre into mi_padre,mi_nombre from sis_modulos where codigo=pcodigo;
	if mi_padre<>'-1' then
		return sis_mi_acendencia(mi_padre) || '-->' || mi_nombre;
	else
		return mi_nombre;
	end if;
	
 END;
 $$;


ALTER FUNCTION public.sis_mi_acendencia(pcodigo character varying) OWNER TO postgres;

--
-- TOC entry 248 (class 1255 OID 467307)
-- Name: sis_reg_modulos(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sis_reg_modulos(pcodigo character varying, pmodulo character varying, pusuario character varying, pnombre character varying, ppagina character varying, ptipo character varying, ppadre character varying, preferencia character varying, pdirecto character varying, pdir_img character varying, porden integer, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
	vcodigo varchar;
	i integer;
	vdatos_auditoria varchar;
	vpasa_validacion integer;
	vauditoria text;
	vcolumnas varchar[];
	vauditoria_des text;
	vauditoria_v varchar[];
	vres2 varchar;
	vauditoria_des_v varchar[];
	vauditoria_resul text;
 BEGIN
	BEGIN
		if pcodigo ='' then-- nuevo
			SELECT coalesce(max(cast(codigo as integer)),0) +1 as mayor into vcodigo FROM sis_modulos ;
			IF NOT FOUND THEN
				res:='Error : no se calculo el nuevo codigo del movimiento';
				cod:='';
				return query select  res, cod;
				return;
			END IF;
			Insert into sis_modulos (codigo, nombre, pagina, tipo, padre, referencia, directo, dir_img,orden)
			values(vcodigo, pnombre, ppagina, ptipo, ppadre, preferencia, pdirecto, pdir_img, porden);
			---nueva auditoria 
			select sis_modulos::text into vauditoria from sis_modulos where codigo=vcodigo;
			insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'sis_modulos','INSERT',CURRENT_TIMESTAMP,vauditoria);
				
			res:='NUEVO';
			cod:=vcodigo;
		else--actualizar
			--nueva auditoria
			select array(SELECT column_name::text FROM information_schema.columns WHERE table_name = 'sis_modulos' order by ordinal_position) into vcolumnas;
			select array(select replace(replace(sis_modulos::text,'(',''),')','') from sis_modulos where codigo=pcodigo) into vauditoria_v;
			update sis_modulos set nombre=pnombre, pagina=ppagina, tipo=ptipo, padre=ppadre, referencia=preferencia, directo=pdirecto, dir_img=pdir_img,orden=porden
			where codigo=pcodigo;
			select array(select replace(replace(sis_modulos::text,'(',''),')','') from sis_modulos where codigo=pcodigo) into vauditoria_des_v ;
			vauditoria_resul='';
			FOR i IN 1..(array_length(vcolumnas, 1)) LOOP
				if vauditoria_v[i] <> vauditoria_des_v[i] then
					vauditoria_resul=vauditoria_resul || vcolumnas[i] || '(' || vauditoria_v[i] || ' -> ' || vauditoria_des_v[i] || ');';
				end if;
			END LOOP;
			if vauditoria_resul<>'' then
				insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'sis_usuario','UPDATE_NEW',CURRENT_TIMESTAMP, vauditoria_resul);
			end if;
			res:='UPDATE';
			cod:=pcodigo;
		end if;
	EXCEPTION WHEN OTHERS THEN
		res:='ERROR';
		cod:=sqlerrm;
        --mensaje := mensaje || ' ******** El bloque de adentro, con errores';
		
	END;
	return query select  res, cod;
       
 END;
 $$;


ALTER FUNCTION public.sis_reg_modulos(pcodigo character varying, pmodulo character varying, pusuario character varying, pnombre character varying, ppagina character varying, ptipo character varying, ppadre character varying, preferencia character varying, pdirecto character varying, pdir_img character varying, porden integer, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 222 (class 1255 OID 467308)
-- Name: sis_reg_permiso_roll(character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sis_reg_permiso_roll(pusuario character varying, proll character varying, pmodulo character varying, pacceso character varying, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
     vcodigo varchar;
 BEGIN
	IF EXISTS(SELECT * FROM sis_modulos_roll where modulo=pmodulo and roll=proll)  THEN-- lo actualizamos
		update sis_modulos_roll set acceso=pacceso
		where modulo=pmodulo and roll=proll;
		res:='ok';
		cod:='';
	ELSE--lo registramos nuevo
		insert into sis_modulos_roll(modulo,roll,acceso)
		values(pmodulo,proll,pacceso);
		res:='ok';
		cod:='';
	END IF;
	return query select  res, cod;
       
 END;
 $$;


ALTER FUNCTION public.sis_reg_permiso_roll(pusuario character varying, proll character varying, pmodulo character varying, pacceso character varying, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 250 (class 1255 OID 467309)
-- Name: sis_reg_rol_usuarios(character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sis_reg_rol_usuarios(pcodigo character varying, pusuario character varying, pempresa_act character varying, pnombre character varying, pmostrar character varying, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
	vcodigo varchar;
	i integer;
	vdatos_auditoria varchar;
	vauditoria text;
	vcolumnas varchar[];
	vauditoria_des text;
	vauditoria_v varchar[];
	vres2 varchar;
	vauditoria_des_v varchar[];
	vauditoria_resul text;
  BEGIN
	BEGIN
		if pcodigo ='' then-- nuevo
			SELECT coalesce(max(cast(codigo as integer)),0) +1 as mayor into vcodigo FROM sis_rol_usuario ;
			IF NOT FOUND THEN
				res:='Error : no se calculo el nuevo codigo del Usuario';
				cod:='';
				return query select  res, cod;
				return;
			END IF;
			Insert into sis_rol_usuario (codigo,nombre,mostrar)
			values(vcodigo,pnombre,pmostrar);
			---nueva auditoria 
			select sis_rol_usuario::text into vauditoria from sis_rol_usuario where codigo=vcodigo;
			insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'SIS_ROL_USUARIO','INSERT',CURRENT_TIMESTAMP,vauditoria);
			
			res:='NUEVO';
			cod:=vcodigo;
		else--actualizar

			--nueva auditoria
			select array(SELECT column_name::text FROM information_schema.columns WHERE table_name = 'sis_rol_usuario' order by ordinal_position) into vcolumnas;
			select array(select replace(replace(sis_rol_usuario::text,'(',''),')','') from sis_rol_usuario where codigo=pcodigo) into vauditoria_v;
			update sis_rol_usuario set nombre=pnombre,mostrar=pmostrar where codigo=pcodigo;
			select array(select replace(replace(sis_rol_usuario::text,'(',''),')','') from sis_rol_usuario where codigo=pcodigo) into vauditoria_des_v ;
			vauditoria_resul='';
			FOR i IN 1..(array_length(vcolumnas, 1)) LOOP
				if vauditoria_v[i] <> vauditoria_des_v[i] then
					vauditoria_resul=vauditoria_resul || vcolumnas[i] || '(' || vauditoria_v[i] || ' -> ' || vauditoria_des_v[i] || ');';
				end if;
			END LOOP;
			if vauditoria_resul<>'' then
				insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'SIS_ROL_USUARIO','UPDATE_NEW',CURRENT_TIMESTAMP, vauditoria_resul);
			end if;
			res:='UPDATE';
			cod:=pcodigo;
		end if;
	EXCEPTION WHEN OTHERS THEN
		res:='ERROR';
		cod:=sqlerrm;
        --mensaje := mensaje || ' ******** El bloque de adentro, con errores';
		
	END;
	return query select  res, cod;
       
 END;
 $$;


ALTER FUNCTION public.sis_reg_rol_usuarios(pcodigo character varying, pusuario character varying, pempresa_act character varying, pnombre character varying, pmostrar character varying, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 249 (class 1255 OID 467310)
-- Name: sis_reg_tipo_contendor(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sis_reg_tipo_contendor(pcodigo character varying, pmodulo character varying, pusuario character varying, pcodigo2 character varying, pnombre character varying, pimagen character varying, pnivel character varying, phijos character varying, pborrable character varying, ptipo_empresa character varying, pempresa_padre character varying, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
	vexiste integer;
	vcodigo varchar;
	i integer;
	vdatos_auditoria varchar;
	vpasa_validacion integer;
	vauditoria text;
	vcolumnas varchar[];
	vauditoria_des text;
	vauditoria_v varchar[];
	vres2 varchar;
	vauditoria_des_v varchar[];
	vauditoria_resul text;
 BEGIN
	BEGIN
	if pcodigo ='' then-- nuevo
		SELECT count(*) into vexiste FROM gd_tipo_contenedor where codigo=pcodigo2 ;
		IF vexiste>0 THEN
			res:='Error : no se puede registrar el codigo ya existe';
			cod:='';
			return query select  res, cod;
			return;
		END IF;
		vcodigo = pcodigo2;
		Insert into gd_tipo_contenedor (codigo, nombre, imagen,  hijos, borrable,tipo_empresa,empresa_padre)
		values(vcodigo, pnombre, pimagen, phijos, pborrable,ptipo_empresa,pempresa_padre);
		---nueva auditoria 
		select gd_tipo_contenedor::text into vauditoria from gd_tipo_contenedor where codigo=vcodigo  ;
		insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'gd_tipo_contenedor','INSERT',CURRENT_TIMESTAMP,vauditoria);

		res:='NUEVO';
		cod:=vcodigo;
	else--actualizar
		--update gd_tipo_contenedor set nombre=pnombre, imagen=pimagen, nivel=pnivel, hijos=phijos, borrable=pborrable
		--where codigo=pcodigo;
		--nueva auditoria
		select array(SELECT column_name::text FROM information_schema.columns WHERE table_name = 'gd_tipo_contenedor' order by ordinal_position) into vcolumnas;
		select array(select replace(replace(gd_tipo_contenedor::text,'(',''),')','') from gd_tipo_contenedor where codigo=pcodigo) into vauditoria_v;
		update gd_tipo_contenedor set nombre=pnombre, imagen=pimagen, hijos=phijos, borrable=pborrable,tipo_empresa=tipo_empresa,empresa_padre=pempresa_padre
		where codigo=pcodigo;
		select array(select replace(replace(gd_tipo_contenedor::text,'(',''),')','') from gd_tipo_contenedor where codigo=pcodigo) into vauditoria_des_v ;
		vauditoria_resul='';
		FOR i IN 1..(array_length(vcolumnas, 1)) LOOP
			if vauditoria_v[i] <> vauditoria_des_v[i] then
				vauditoria_resul=vauditoria_resul || vcolumnas[i] || '(' || vauditoria_v[i] || ' -> ' || vauditoria_des_v[i] || ');';
			end if;
		END LOOP;
		if vauditoria_resul<>'' then
			insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'gd_tipo_contenedor','UPDATE_NEW',CURRENT_TIMESTAMP, vauditoria_resul);
		end if;

		res:='UPDATE';
		cod:=pcodigo;
	end if;
	EXCEPTION WHEN OTHERS THEN
		res:='ERROR';
		cod:=sqlerrm;
        --mensaje := mensaje || ' ******** El bloque de adentro, con errores';
		
	END;
	return query select  res, cod;
       
 END;
 $$;


ALTER FUNCTION public.sis_reg_tipo_contendor(pcodigo character varying, pmodulo character varying, pusuario character varying, pcodigo2 character varying, pnombre character varying, pimagen character varying, pnivel character varying, phijos character varying, pborrable character varying, ptipo_empresa character varying, pempresa_padre character varying, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 223 (class 1255 OID 467311)
-- Name: sis_reg_usuario_clave(character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sis_reg_usuario_clave(pcodigo character varying, pnombre character varying, pclave character varying, pclave2 character varying, ppersona character varying, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
     vcodigo varchar;
 BEGIN
	IF EXISTS(SELECT * FROM sis_usuario where codigo=pcodigo and nombre=pnombre and clave=md5(pclave2)) THEN
		update sis_usuario set nombre=pnombre,clave=md5(pclave)
		where codigo=pcodigo;
		res:='UPDATE';
		cod:=pcodigo;
		return query select  res, cod;
	ELSE
		res:='Error: Clave incorrecta.';
		cod:='';
		return query select  res, cod;
	END IF;
       
 END;
 $$;


ALTER FUNCTION public.sis_reg_usuario_clave(pcodigo character varying, pnombre character varying, pclave character varying, pclave2 character varying, ppersona character varying, OUT res character varying, OUT cod character varying) OWNER TO postgres;

--
-- TOC entry 251 (class 1255 OID 467312)
-- Name: sis_reg_usuarios(character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sis_reg_usuarios(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pnombre character varying, pclave character varying, ppersona character varying, ptipo character varying, prol character varying, pact character varying, pempresa character varying, pestado character varying, pdirectorio character varying, OUT res character varying, OUT cod character varying) RETURNS SETOF record
    LANGUAGE plpgsql
    AS $$
 DECLARE
	vcodigo varchar;
	i integer;
	vdatos_auditoria varchar;
	vpasa_validacion integer;
	vauditoria text;
	vcolumnas varchar[];
	vauditoria_des text;
	vauditoria_v varchar[];
	vres2 varchar;
	vauditoria_des_v varchar[];
	vauditoria_resul text;
  BEGIN
	BEGIN
		if pcodigo ='' then-- nuevo
			SELECT coalesce(max(cast(codigo as integer)),0) +1 as mayor into vcodigo FROM sis_usuario ;
			IF NOT FOUND THEN
				res:='Error : no se calculo el nuevo codigo del Usuario';
				cod:='';
				return query select  res, cod;
				return;
			END IF;
			Insert into sis_usuario (codigo,nombre,clave,persona,tipo,rol,usuario,empresa,empresa_act,estado,directorio)
			values(vcodigo,pnombre,md5(pclave),ppersona,ptipo,prol,pusuario,pempresa,pempresa,pestado,pdirectorio);
			---nueva auditoria 
			select sis_usuario::text into vauditoria from sis_usuario where codigo=vcodigo;
			insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'sis_usuario','INSERT',CURRENT_TIMESTAMP,vauditoria);
			
			res:='NUEVO';
			cod:=vcodigo;
		else--actualizar
			--nueva auditoria
			select array(SELECT column_name::text FROM information_schema.columns WHERE table_name = 'sis_usuario' order by ordinal_position) into vcolumnas;
			select array(select replace(replace(sis_usuario::text,'(',''),')','') from sis_usuario where codigo=pcodigo) into vauditoria_v;
			update sis_usuario set nombre=pnombre,tipo=ptipo,rol=prol,empresa=pempresa,empresa_act=pempresa,estado=pestado,directorio=pdirectorio
			where codigo=pcodigo;
			select array(select replace(replace(sis_usuario::text,'(',''),')','') from sis_usuario where codigo=pcodigo) into vauditoria_des_v ;
			vauditoria_resul='';
			FOR i IN 1..(array_length(vcolumnas, 1)) LOOP
				if vauditoria_v[i] <> vauditoria_des_v[i] then
					vauditoria_resul=vauditoria_resul || vcolumnas[i] || '(' || vauditoria_v[i] || ' -> ' || vauditoria_des_v[i] || ');';
				end if;
			END LOOP;
			if vauditoria_resul<>'' then
				insert into gd_auditoria(usuario,n_usuario,tabla,accion,fecha_hora,datos) values(pusuario,pusuario,'sis_usuario','UPDATE_NEW',CURRENT_TIMESTAMP, vauditoria_resul);
			end if;
			if pact='1' then
				update sis_usuario set clave=md5(pclave)
				where codigo=pcodigo;
			end if;
			res:='UPDATE';
			cod:=pcodigo;
		end if;
	EXCEPTION WHEN OTHERS THEN
		res:='ERROR';
		cod:=sqlerrm;
        --mensaje := mensaje || ' ******** El bloque de adentro, con errores';
		
	END;
	return query select  res, cod;
       
 END;
 $$;


ALTER FUNCTION public.sis_reg_usuarios(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pnombre character varying, pclave character varying, ppersona character varying, ptipo character varying, prol character varying, pact character varying, pempresa character varying, pestado character varying, pdirectorio character varying, OUT res character varying, OUT cod character varying) OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 172 (class 1259 OID 467313)
-- Name: auditoria; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auditoria (
    usuario character varying(10),
    n_usuario character varying(30),
    accion character varying(30),
    fecha_hora character varying(30),
    datos text,
    index integer NOT NULL,
    tabla character varying(120)
);


ALTER TABLE public.auditoria OWNER TO postgres;

--
-- TOC entry 173 (class 1259 OID 467319)
-- Name: auditoria_index_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.auditoria_index_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.auditoria_index_seq OWNER TO postgres;

--
-- TOC entry 2267 (class 0 OID 0)
-- Dependencies: 173
-- Name: auditoria_index_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.auditoria_index_seq OWNED BY public.auditoria.index;


--
-- TOC entry 174 (class 1259 OID 467321)
-- Name: gd_atributos_documento; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.gd_atributos_documento (
    codigo character varying(10) NOT NULL,
    tipo_documento character varying(10),
    nombre character varying(100),
    obligatorio character varying(3),
    tipo_dato character varying(5),
    orden integer,
    borrado character varying(1) DEFAULT 'N'::character varying
);


ALTER TABLE public.gd_atributos_documento OWNER TO postgres;

--
-- TOC entry 2269 (class 0 OID 0)
-- Dependencies: 174
-- Name: TABLE gd_atributos_documento; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.gd_atributos_documento IS 'TABLA DONDE SE REGISTRAN LOS ATRIBUTOS O CARACTERISTICAS DE LOS DIFERENTES TIPOS DE DOCUMENTOS QUE SE ALMACENAN EN LAS BODEGAS DE ARCHIVO DE LA ZONA';


--
-- TOC entry 2270 (class 0 OID 0)
-- Dependencies: 174
-- Name: COLUMN gd_atributos_documento.codigo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_atributos_documento.codigo IS 'CODIGO UNICO QUE IDENTIFICA AL ATRIBUTO DENTRO DEL SISTEMA';


--
-- TOC entry 2271 (class 0 OID 0)
-- Dependencies: 174
-- Name: COLUMN gd_atributos_documento.tipo_documento; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_atributos_documento.tipo_documento IS 'CODIGO QUE IDENTIFICA A QUE TIPO DE DOCUMENTO PERTENECE EL ATRIBUTO';


--
-- TOC entry 2272 (class 0 OID 0)
-- Dependencies: 174
-- Name: COLUMN gd_atributos_documento.nombre; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_atributos_documento.nombre IS 'NOMBRE QUE IDENTIFICA AL ATRIBUTO EN SU RESPETIVO TIPO DE DOCUMENTO';


--
-- TOC entry 2273 (class 0 OID 0)
-- Dependencies: 174
-- Name: COLUMN gd_atributos_documento.obligatorio; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_atributos_documento.obligatorio IS 'INDICA SI EL REGISTRO DEL ATRIBUTO ES OBLIGATORIO O NO';


--
-- TOC entry 2274 (class 0 OID 0)
-- Dependencies: 174
-- Name: COLUMN gd_atributos_documento.tipo_dato; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_atributos_documento.tipo_dato IS 'INDICA EL TIPO DE DATO QUE DEBE PRESENTARSE EN PANTALLA';


--
-- TOC entry 2275 (class 0 OID 0)
-- Dependencies: 174
-- Name: COLUMN gd_atributos_documento.orden; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_atributos_documento.orden IS 'VALOR CON EL QUE SE INDICA EL ORDEN EN QUE SE DEBEN PRESENTAR LOS DOCUMENTOS';


--
-- TOC entry 2276 (class 0 OID 0)
-- Dependencies: 174
-- Name: COLUMN gd_atributos_documento.borrado; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_atributos_documento.borrado IS 'INDICA SI EL ATRIBUTO FUE BORRADO O NO';


--
-- TOC entry 175 (class 1259 OID 467325)
-- Name: gd_auditoria; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.gd_auditoria (
    usuario character varying(10),
    n_usuario character varying(30),
    accion character varying(30),
    fecha_hora character varying(30),
    datos text,
    index integer NOT NULL,
    tabla character varying(120)
);


ALTER TABLE public.gd_auditoria OWNER TO postgres;

--
-- TOC entry 176 (class 1259 OID 467331)
-- Name: gd_auditoria_index_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.gd_auditoria_index_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.gd_auditoria_index_seq OWNER TO postgres;

--
-- TOC entry 2279 (class 0 OID 0)
-- Dependencies: 176
-- Name: gd_auditoria_index_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.gd_auditoria_index_seq OWNED BY public.gd_auditoria.index;


--
-- TOC entry 177 (class 1259 OID 467333)
-- Name: gd_contenedor; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.gd_contenedor (
    codigo character varying(15) NOT NULL,
    nombre character varying(100),
    descripcion character varying(300),
    tipo character varying(3),
    contenedor_padre character varying(15),
    estado character varying(3) DEFAULT 'A'::character varying,
    custodio character varying(120),
    borrado character varying(2) DEFAULT 'N'::character varying,
    empresa character varying(10),
    codificacion character varying(30)
);


ALTER TABLE public.gd_contenedor OWNER TO postgres;

--
-- TOC entry 2281 (class 0 OID 0)
-- Dependencies: 177
-- Name: TABLE gd_contenedor; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.gd_contenedor IS 'TABLA QUE PERMITE REGISTRAR LOS DATOS DE LOS CONTENEDORES DE LOS DOCUMENTOS QUE SE ENCUENTRAN ARCHIVADOS EN LAS DIFERENTES UNIDADES DE ARCHIVO DE LA ZONA- ESTOS CONTENEDORES PUEDEN SER CAJAS O FOLDER';


--
-- TOC entry 2282 (class 0 OID 0)
-- Dependencies: 177
-- Name: COLUMN gd_contenedor.codigo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_contenedor.codigo IS 'CODIGO UNICO QUE IDENTIFICA AL CONTENEDOR DENTRO DE LA EMPRESA';


--
-- TOC entry 2283 (class 0 OID 0)
-- Dependencies: 177
-- Name: COLUMN gd_contenedor.nombre; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_contenedor.nombre IS 'PERMITE REGISTRAR EL NOMBRE CON EL QUE SE RECONOCE AL CONTENEDOR';


--
-- TOC entry 2284 (class 0 OID 0)
-- Dependencies: 177
-- Name: COLUMN gd_contenedor.descripcion; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_contenedor.descripcion IS 'PERMITE REGISTRAR INFORMACION QUE PERMITE DESCRIBIR EL TIPO DE INFORMACION QUE SE ALMACENA EN EL CONTENEDOR';


--
-- TOC entry 2285 (class 0 OID 0)
-- Dependencies: 177
-- Name: COLUMN gd_contenedor.tipo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_contenedor.tipo IS 'IDENTIFICA EL TIPO DE CONTENEDOR
CA= CAJA
FO = FOLDER
CP = CARPETA';


--
-- TOC entry 2286 (class 0 OID 0)
-- Dependencies: 177
-- Name: COLUMN gd_contenedor.contenedor_padre; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_contenedor.contenedor_padre IS 'INDICA CUAL ES EL CONTENEDOR PADRE';


--
-- TOC entry 2287 (class 0 OID 0)
-- Dependencies: 177
-- Name: COLUMN gd_contenedor.borrado; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_contenedor.borrado IS 'INDICA EL ESTADO DE UN DOCUMENTO ACTIVO
N= EL DOCUMENTO SE ENCUENTRA ACTIVO
S= EL DOCUMENTO FUE BORRADO POR ALGUN USUARIO''';


--
-- TOC entry 2288 (class 0 OID 0)
-- Dependencies: 177
-- Name: COLUMN gd_contenedor.empresa; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_contenedor.empresa IS 'INDICA A QUE EMPRESA CORRESPONDE EL CONTENEDOR';


--
-- TOC entry 178 (class 1259 OID 467341)
-- Name: gd_documento; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.gd_documento (
    codigo character varying(15) NOT NULL,
    empresa character varying(10) NOT NULL,
    contenedor character varying(15) NOT NULL,
    tipo character varying(10),
    estado character varying(2),
    dir_fisica_documento character varying(500),
    datos_documento text,
    nombre_doc character varying(200),
    codificacion character varying(300),
    formato character varying(2),
    origen character varying(300),
    proc_origen character varying(200),
    origen_distrito character varying(10),
    origen_uo character varying(10),
    origen_bodega character varying(10),
    borrado character varying(1) DEFAULT 'N'::character varying,
    fecha_registro character varying(30)
);


ALTER TABLE public.gd_documento OWNER TO postgres;

--
-- TOC entry 2290 (class 0 OID 0)
-- Dependencies: 178
-- Name: TABLE gd_documento; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.gd_documento IS 'TABLA PARA ALMACENAR LOS DATOS INICIALES DE LOS DOCUMENTOS QUE SE ALMACENAN EN LOS FOLDER O CARPETAS';


--
-- TOC entry 2291 (class 0 OID 0)
-- Dependencies: 178
-- Name: COLUMN gd_documento.codigo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_documento.codigo IS 'CODIGO QUE IDENTIFICA A LOS DOCUMENTOS QUE SE PUEDEN ALMACENAR EN LOS DIFERENTES FOLDER DE UNA EMPRESA';


--
-- TOC entry 2292 (class 0 OID 0)
-- Dependencies: 178
-- Name: COLUMN gd_documento.empresa; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_documento.empresa IS 'INDICA LA EMPRESA A LA QUE PERTENECE EL DOCUMENTO';


--
-- TOC entry 2293 (class 0 OID 0)
-- Dependencies: 178
-- Name: COLUMN gd_documento.contenedor; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_documento.contenedor IS 'INDICA EL CODIGO QUE HACE REFERENCIA AL CONTENEDOR DONDE SE ENCUENTRA EL DOCUMENTO';


--
-- TOC entry 2294 (class 0 OID 0)
-- Dependencies: 178
-- Name: COLUMN gd_documento.tipo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_documento.tipo IS 'IDENTIFICA CUAL ES EL TIPO DE DOCUEMNTO QUE SE VA ALAMCENAR SEGUN ESTEN CREDOS EN LA TABLA GD_TIPO_DOCUMENTO';


--
-- TOC entry 2295 (class 0 OID 0)
-- Dependencies: 178
-- Name: COLUMN gd_documento.estado; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_documento.estado IS 'INDICA EL ESTADO DE UN DOCUMENTO ACTIVO
A= EL DOCUMENTO SE ENCUENTRA ACTIVO
N= EL DOCUMENTO FUE BORRADO POR ALGUN USUARIO';


--
-- TOC entry 2296 (class 0 OID 0)
-- Dependencies: 178
-- Name: COLUMN gd_documento.datos_documento; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_documento.datos_documento IS 'EN ESTE CAMPO SE ALAMACENARAN LOS DATOS DE CADA ATRIBUTO EN FORMATO DE ARREGLO SEPARADO DE LA SIGUIENTE FORMA
ATRIBUTO;VALOR|ATRIBUTO;VALOR';


--
-- TOC entry 2297 (class 0 OID 0)
-- Dependencies: 178
-- Name: COLUMN gd_documento.borrado; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_documento.borrado IS 'INDICA EL ESTADO DE UN DOCUMENTO ACTIVO
N= EL DOCUMENTO SE ENCUENTRA ACTIVO
S= EL DOCUMENTO FUE BORRADO POR ALGUN USUARIO''';


--
-- TOC entry 179 (class 1259 OID 467348)
-- Name: gd_documento_anexo; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.gd_documento_anexo (
    codigo character varying(10) NOT NULL,
    documento character varying(10) NOT NULL,
    empresa character varying(10) NOT NULL,
    dir_fisica_documento character varying(500),
    nombre_doc character varying(100),
    referencia_doc character varying(200),
    extencion character varying(60),
    borrado character varying(1) DEFAULT 'N'::character varying,
    fecha_registro character varying(30),
    dir_virtual character varying(300),
    fojas integer DEFAULT 0,
    usuario character varying(10)
);


ALTER TABLE public.gd_documento_anexo OWNER TO postgres;

--
-- TOC entry 2299 (class 0 OID 0)
-- Dependencies: 179
-- Name: TABLE gd_documento_anexo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.gd_documento_anexo IS 'AQUI SE ALMACENA LOS DATOS DE LOS DOCUMENTOS ANEXOS DE CADA DADUMENTO';


--
-- TOC entry 2300 (class 0 OID 0)
-- Dependencies: 179
-- Name: COLUMN gd_documento_anexo.codigo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_documento_anexo.codigo IS 'CODIGO UNICO DEL ANEXO DE CADA DOCUMENTO';


--
-- TOC entry 2301 (class 0 OID 0)
-- Dependencies: 179
-- Name: COLUMN gd_documento_anexo.documento; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_documento_anexo.documento IS 'INDICA EL CODIGO DEL DOCUMENTO AL QUE PERTNECE EL ANEXO';


--
-- TOC entry 2302 (class 0 OID 0)
-- Dependencies: 179
-- Name: COLUMN gd_documento_anexo.empresa; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_documento_anexo.empresa IS 'INDICA EL CODIGO DE LA EMPRESA';


--
-- TOC entry 2303 (class 0 OID 0)
-- Dependencies: 179
-- Name: COLUMN gd_documento_anexo.dir_virtual; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_documento_anexo.dir_virtual IS 'ALMACENA EL DIRECTORIO VIRTUAL DONDE SE ENCUENTRA EL ARCHIVO ALMACENADO';


--
-- TOC entry 2304 (class 0 OID 0)
-- Dependencies: 179
-- Name: COLUMN gd_documento_anexo.fojas; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_documento_anexo.fojas IS 'INDICA LA CANTIDAD DE FOJAS QUE TIENE EL ANEXO';


--
-- TOC entry 180 (class 1259 OID 467356)
-- Name: gd_empresa; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.gd_empresa (
    codigo character varying(10) NOT NULL,
    nombre character varying(200),
    ruc character varying(13),
    direccion character varying(300),
    nomenclatura character varying(10),
    directorio character varying(15),
    editable character varying(1) DEFAULT 'S'::character varying,
    empresa_padre character varying(10),
    tipo character varying(2),
    borrado character varying(1) DEFAULT 'N'::character varying
);


ALTER TABLE public.gd_empresa OWNER TO postgres;

--
-- TOC entry 2306 (class 0 OID 0)
-- Dependencies: 180
-- Name: TABLE gd_empresa; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.gd_empresa IS 'TABLA PARA REGISTRAR LAS EMPRESAS QUE PUEDEN SER 
SEDES ZONALES
SEDES DISTRITALES
UNIDADES OPERATIVAS
O PROVEEDORES';


--
-- TOC entry 2307 (class 0 OID 0)
-- Dependencies: 180
-- Name: COLUMN gd_empresa.directorio; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_empresa.directorio IS 'IDENTIFICA EL CONTENEDOR DONDE SE INICIA EL ACCESO AL DIRECTORIO DE PRIVILEGIO DEL USUARIO';


--
-- TOC entry 2308 (class 0 OID 0)
-- Dependencies: 180
-- Name: COLUMN gd_empresa.editable; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_empresa.editable IS 'INDICA SI EL REGISTRO D ELA EMPRESA ES EDITABLE
S= EDITABLE
N= NO EDITABLE';


--
-- TOC entry 2309 (class 0 OID 0)
-- Dependencies: 180
-- Name: COLUMN gd_empresa.empresa_padre; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_empresa.empresa_padre IS 'INDICA EL CODIGO DE LA EMPRESA PADRE DE LA EMPRESA ACTUAL';


--
-- TOC entry 2310 (class 0 OID 0)
-- Dependencies: 180
-- Name: COLUMN gd_empresa.tipo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_empresa.tipo IS 'INDICA EL TIPO DE EMPRESA 
RA= PRINCIPAL RAIZ
ZO = ZONAL
HO = HOSPITAL
DI = DISTRITO';


--
-- TOC entry 2311 (class 0 OID 0)
-- Dependencies: 180
-- Name: COLUMN gd_empresa.borrado; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_empresa.borrado IS 'INDICA SI LA EMPRESA ESTA BORRADA O NO';


--
-- TOC entry 181 (class 1259 OID 467364)
-- Name: gd_permiso_usuario; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.gd_permiso_usuario (
    cod_usuario character varying(10),
    cod_gd_contenedor character varying(10),
    codigo character varying(10) NOT NULL,
    acceso character varying(1)
);


ALTER TABLE public.gd_permiso_usuario OWNER TO postgres;

--
-- TOC entry 2313 (class 0 OID 0)
-- Dependencies: 181
-- Name: TABLE gd_permiso_usuario; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.gd_permiso_usuario IS 'TABLA PARA ALMACENAR LOS DIRECTORIOS A LOS CUALES  TIENE ACCESO EL USUARIO';


--
-- TOC entry 2314 (class 0 OID 0)
-- Dependencies: 181
-- Name: COLUMN gd_permiso_usuario.cod_usuario; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_permiso_usuario.cod_usuario IS 'IDENTIFICA AL USUARIO';


--
-- TOC entry 2315 (class 0 OID 0)
-- Dependencies: 181
-- Name: COLUMN gd_permiso_usuario.cod_gd_contenedor; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_permiso_usuario.cod_gd_contenedor IS 'IDENTIFICA EL CODIGO DEL DIRECTORIO AL QUE SE DA PERMISO AL USUARIO';


--
-- TOC entry 2316 (class 0 OID 0)
-- Dependencies: 181
-- Name: COLUMN gd_permiso_usuario.codigo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_permiso_usuario.codigo IS 'IDENTIFICA EL CODIGO UNICO DEL REGISTRO';


--
-- TOC entry 2317 (class 0 OID 0)
-- Dependencies: 181
-- Name: COLUMN gd_permiso_usuario.acceso; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_permiso_usuario.acceso IS 'N = NO TIENE ACCESO
V = PUEDE SOLO VER EL CONTENIDO Y DESCARGARLO
E = PUEDE EDITAR Y DESCARGAR LOS CONTENIDOS';


--
-- TOC entry 182 (class 1259 OID 467367)
-- Name: gd_persona; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.gd_persona (
    codigo character varying(10) NOT NULL,
    cedula character varying(12),
    nombre character varying(150),
    direccion character varying(250),
    telefono character varying(30),
    cargo character varying(100),
    apellido character varying(60),
    usuario character varying(10),
    empresa character varying(10),
    correo character varying(120)
);


ALTER TABLE public.gd_persona OWNER TO postgres;

--
-- TOC entry 2319 (class 0 OID 0)
-- Dependencies: 182
-- Name: COLUMN gd_persona.correo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_persona.correo IS 'CAMPO PARA REGISTRAR EL CORREO ELECPRONICO DEL FUNCIONARIO';


--
-- TOC entry 183 (class 1259 OID 467373)
-- Name: gd_registro_consultas; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.gd_registro_consultas (
    codigo character varying(10) NOT NULL,
    anexo character varying(10) NOT NULL,
    usuario character varying(10),
    fecha_hora character varying(30),
    documento character varying(10) NOT NULL
);


ALTER TABLE public.gd_registro_consultas OWNER TO postgres;

--
-- TOC entry 2321 (class 0 OID 0)
-- Dependencies: 183
-- Name: TABLE gd_registro_consultas; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.gd_registro_consultas IS 'EN ESTA TABLA SE REGISTRA CADA VES QUE UN USUARIOS DESCARGUE UN ENEXO DE UN DOCUMENTO DESDE EL MODULO DE CONSULTAS
ESTO CON EL OBJETIVO DE LLEVAR LOS REPORTES DE USO DEL SISTEMA';


--
-- TOC entry 2322 (class 0 OID 0)
-- Dependencies: 183
-- Name: COLUMN gd_registro_consultas.codigo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_registro_consultas.codigo IS 'CODIGO UNICO DE LA CONSULTA DE UN DOCUMENTO';


--
-- TOC entry 2323 (class 0 OID 0)
-- Dependencies: 183
-- Name: COLUMN gd_registro_consultas.anexo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_registro_consultas.anexo IS 'INDICA EL CODIGO QUE IDENTIFICA EL ANEXO AL CUAL SE LO CONSULTA';


--
-- TOC entry 2324 (class 0 OID 0)
-- Dependencies: 183
-- Name: COLUMN gd_registro_consultas.documento; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_registro_consultas.documento IS 'INDICA EL CODIGO DEL DOCUMENTO DONDE SE ENCUENTRA EL ANEXO';


--
-- TOC entry 184 (class 1259 OID 467376)
-- Name: gd_tipo_contenedor; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.gd_tipo_contenedor (
    codigo character varying NOT NULL,
    nombre character varying(100),
    imagen character varying(100),
    nivel integer,
    hijos character varying(100),
    borrable character varying(2),
    tipo_empresa character varying(2),
    empresa_padre character varying(2)
);


ALTER TABLE public.gd_tipo_contenedor OWNER TO postgres;

--
-- TOC entry 2326 (class 0 OID 0)
-- Dependencies: 184
-- Name: COLUMN gd_tipo_contenedor.codigo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_tipo_contenedor.codigo IS '10';


--
-- TOC entry 2327 (class 0 OID 0)
-- Dependencies: 184
-- Name: COLUMN gd_tipo_contenedor.nivel; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_tipo_contenedor.nivel IS 'INDICA EL NIVEL DE CONTENEDOR';


--
-- TOC entry 2328 (class 0 OID 0)
-- Dependencies: 184
-- Name: COLUMN gd_tipo_contenedor.borrable; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_tipo_contenedor.borrable IS 'CAMPO QUE IDENTIFICA SI EL OBJETO PUEDE SER BORRABLE POR EL USUARIO
S= PUEDER BORRARSE
N= NO LO PUEDE HACER';


--
-- TOC entry 2329 (class 0 OID 0)
-- Dependencies: 184
-- Name: COLUMN gd_tipo_contenedor.tipo_empresa; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_tipo_contenedor.tipo_empresa IS 'SE UTILIZA PARA ESTABLESER SI SE LO UTILIZA COMO TIPO DE EMPRESA
SI = SI SE UTILIZA
NO = NO SE UTILIZA';


--
-- TOC entry 2330 (class 0 OID 0)
-- Dependencies: 184
-- Name: COLUMN gd_tipo_contenedor.empresa_padre; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_tipo_contenedor.empresa_padre IS 'INDICA SI SE MUESTRA COMO EMPRESA PADRE LAS EMMPRESAS QUE TENGAN ESTE TIPO DE EMPRESA
SI = SE UTILIZA
NO = NO SE UTILIZA';


--
-- TOC entry 185 (class 1259 OID 467382)
-- Name: gd_tipo_documento; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.gd_tipo_documento (
    codigo character varying(10) NOT NULL,
    nombre character varying(120),
    abreviatura character varying(5)
);


ALTER TABLE public.gd_tipo_documento OWNER TO postgres;

--
-- TOC entry 2332 (class 0 OID 0)
-- Dependencies: 185
-- Name: TABLE gd_tipo_documento; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.gd_tipo_documento IS 'TABLA DONDE SE ALMACENAN LOS LOS DIFERENTES TIPOS DE DOCUMENTOS QUE SE ALM,ACENAN EL LOS DIFERENTES CONTENEDORES QUE SE ALAMCENAN EN LAS BODEGAS DE ARCHIVOS DE LA ZONA';


--
-- TOC entry 2333 (class 0 OID 0)
-- Dependencies: 185
-- Name: COLUMN gd_tipo_documento.codigo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_tipo_documento.codigo IS 'IDENTIFICA EL CODIGO UNICO DE LOS TIPOS DE ARCHIVOS EN TODO EL SISTEMA';


--
-- TOC entry 2334 (class 0 OID 0)
-- Dependencies: 185
-- Name: COLUMN gd_tipo_documento.nombre; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_tipo_documento.nombre IS 'PERMITE INGRESAR EL NOMBRE DEL TIPO DE DOCUMENTO A REGISTRAR';


--
-- TOC entry 2335 (class 0 OID 0)
-- Dependencies: 185
-- Name: COLUMN gd_tipo_documento.abreviatura; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gd_tipo_documento.abreviatura IS 'ABREVIATURA DEL NOMBRE DEL TIPO DE DOCUMENTO PARA PRESENTAR EN REPORTES';


--
-- TOC entry 186 (class 1259 OID 467385)
-- Name: gd_unidad_operativa; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.gd_unidad_operativa (
    codigo character varying(10) NOT NULL,
    nombre character varying(200),
    zona character varying(10),
    distrito character varying(10),
    provincia character varying(100),
    canton character varying(100),
    parroquia character varying(100),
    direccion character varying(300)
);


ALTER TABLE public.gd_unidad_operativa OWNER TO postgres;

--
-- TOC entry 187 (class 1259 OID 467391)
-- Name: gd_zona; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.gd_zona (
    codigo character varying(10) NOT NULL,
    nombre character varying(120)
);


ALTER TABLE public.gd_zona OWNER TO postgres;

--
-- TOC entry 188 (class 1259 OID 467394)
-- Name: prueba; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.prueba (
    codigo character varying(10) NOT NULL
);


ALTER TABLE public.prueba OWNER TO postgres;

--
-- TOC entry 189 (class 1259 OID 467397)
-- Name: sis_configuracion; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.sis_configuracion (
    codigo character varying(20) NOT NULL,
    nombre character varying(200),
    valor character varying(300),
    tipo character varying(10) NOT NULL
);


ALTER TABLE public.sis_configuracion OWNER TO postgres;

--
-- TOC entry 2340 (class 0 OID 0)
-- Dependencies: 189
-- Name: TABLE sis_configuracion; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.sis_configuracion IS 'EN ESTA TABLA SE ALMACENAN LAS CONFIRACIONES GENERALES DEL SISTEMA';


--
-- TOC entry 2341 (class 0 OID 0)
-- Dependencies: 189
-- Name: COLUMN sis_configuracion.codigo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.sis_configuracion.codigo IS 'codigo que identifica a la configuracion';


--
-- TOC entry 2342 (class 0 OID 0)
-- Dependencies: 189
-- Name: COLUMN sis_configuracion.nombre; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.sis_configuracion.nombre IS 'DESCRIBE LA  CONFIGURACION QUE SE REGISTRA';


--
-- TOC entry 2343 (class 0 OID 0)
-- Dependencies: 189
-- Name: COLUMN sis_configuracion.valor; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.sis_configuracion.valor IS 'ESTABLECE EL VALOR QUE TENDRA LA CONFIGURACION ';


--
-- TOC entry 2344 (class 0 OID 0)
-- Dependencies: 189
-- Name: COLUMN sis_configuracion.tipo; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.sis_configuracion.tipo IS 'INDICA EL TIPO DE CONFIGURACION';


--
-- TOC entry 190 (class 1259 OID 467403)
-- Name: sis_modulos; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.sis_modulos (
    codigo character varying(10) NOT NULL,
    nombre character varying(100),
    pagina character varying(200),
    directo character varying(1),
    dir_img character varying(250),
    tipo character varying(1),
    padre character varying(10),
    orden integer,
    referencia character varying(120)
);


ALTER TABLE public.sis_modulos OWNER TO postgres;

--
-- TOC entry 191 (class 1259 OID 467409)
-- Name: sis_modulos_roll; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.sis_modulos_roll (
    roll character varying(10) NOT NULL,
    modulo character varying(10) NOT NULL,
    acceso character varying(3),
    editar character varying(3),
    nuevo character varying(3),
    borrar character varying(3),
    imprimir character varying(3)
);


ALTER TABLE public.sis_modulos_roll OWNER TO postgres;

--
-- TOC entry 192 (class 1259 OID 467412)
-- Name: sis_rol_usuario; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.sis_rol_usuario (
    codigo character varying(10) NOT NULL,
    nombre character varying(100),
    mostrar character varying(1)
);


ALTER TABLE public.sis_rol_usuario OWNER TO postgres;

--
-- TOC entry 2348 (class 0 OID 0)
-- Dependencies: 192
-- Name: COLUMN sis_rol_usuario.mostrar; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.sis_rol_usuario.mostrar IS 'N = NACIONAL
Z = ZONAL
D = DISTRITAL U HOSPITAL';


--
-- TOC entry 193 (class 1259 OID 467415)
-- Name: sis_usuario; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.sis_usuario (
    codigo character varying(10) NOT NULL,
    nombre character varying(100),
    clave character varying(50),
    persona character varying(10),
    tipo character varying(10),
    zona character varying(10),
    distrito character varying(10),
    rol character varying(10),
    usuario character varying(10),
    directorio character varying(10),
    fecha_hora_con character varying(50),
    provincia character varying(10),
    empresa character varying(10),
    empresa_act character varying(10),
    estado character varying(2) DEFAULT '1'::character varying,
    periodo_act character varying(10)
);


ALTER TABLE public.sis_usuario OWNER TO postgres;

--
-- TOC entry 2350 (class 0 OID 0)
-- Dependencies: 193
-- Name: COLUMN sis_usuario.directorio; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.sis_usuario.directorio IS 'INDICA EL DIRECTORIO INICIAL DEL USUARIO';


--
-- TOC entry 2351 (class 0 OID 0)
-- Dependencies: 193
-- Name: COLUMN sis_usuario.periodo_act; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.sis_usuario.periodo_act IS 'INDICA EL CODIGO DEL PERIODO DE LA EMPRESA DONDE ACCEDIO POR ULTIMA VEZ EL USUARIO-POR DEFECTO ES EL PERIODO ACTUAL';


--
-- TOC entry 194 (class 1259 OID 467419)
-- Name: tipo_usuario; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tipo_usuario (
    codigo character varying(10) NOT NULL,
    nombre character varying(100)
);


ALTER TABLE public.tipo_usuario OWNER TO postgres;

--
-- TOC entry 195 (class 1259 OID 467422)
-- Name: zona; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.zona (
    codigo character varying(10) NOT NULL,
    nombre character varying(200)
);


ALTER TABLE public.zona OWNER TO postgres;

--
-- TOC entry 2046 (class 2604 OID 467425)
-- Name: auditoria index; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auditoria ALTER COLUMN index SET DEFAULT nextval('public.auditoria_index_seq'::regclass);


--
-- TOC entry 2048 (class 2604 OID 467426)
-- Name: gd_auditoria index; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gd_auditoria ALTER COLUMN index SET DEFAULT nextval('public.gd_auditoria_index_seq'::regclass);


--
-- TOC entry 2074 (class 2606 OID 467428)
-- Name: gd_persona cedula_unica; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gd_persona
    ADD CONSTRAINT cedula_unica UNIQUE (cedula);


--
-- TOC entry 2355 (class 0 OID 0)
-- Dependencies: 2074
-- Name: CONSTRAINT cedula_unica ON gd_persona; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON CONSTRAINT cedula_unica ON public.gd_persona IS 'cedula duplicada';


--
-- TOC entry 2058 (class 2606 OID 467430)
-- Name: auditoria pk_auditoria; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auditoria
    ADD CONSTRAINT pk_auditoria PRIMARY KEY (index);


--
-- TOC entry 2064 (class 2606 OID 467432)
-- Name: gd_contenedor pk_contenedor; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gd_contenedor
    ADD CONSTRAINT pk_contenedor PRIMARY KEY (codigo);


--
-- TOC entry 2066 (class 2606 OID 467434)
-- Name: gd_documento pk_documento; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gd_documento
    ADD CONSTRAINT pk_documento PRIMARY KEY (codigo);


--
-- TOC entry 2068 (class 2606 OID 467436)
-- Name: gd_documento_anexo pk_documento_anexo; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gd_documento_anexo
    ADD CONSTRAINT pk_documento_anexo PRIMARY KEY (codigo, documento);


--
-- TOC entry 2070 (class 2606 OID 467438)
-- Name: gd_empresa pk_empresa; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gd_empresa
    ADD CONSTRAINT pk_empresa PRIMARY KEY (codigo);


--
-- TOC entry 2060 (class 2606 OID 467440)
-- Name: gd_atributos_documento pk_gd_atributo_documento; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gd_atributos_documento
    ADD CONSTRAINT pk_gd_atributo_documento PRIMARY KEY (codigo);


--
-- TOC entry 2062 (class 2606 OID 467442)
-- Name: gd_auditoria pk_gd_auditoria; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gd_auditoria
    ADD CONSTRAINT pk_gd_auditoria PRIMARY KEY (index);


--
-- TOC entry 2072 (class 2606 OID 467444)
-- Name: gd_permiso_usuario pk_gd_permiso_usuario; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gd_permiso_usuario
    ADD CONSTRAINT pk_gd_permiso_usuario PRIMARY KEY (codigo);


--
-- TOC entry 2078 (class 2606 OID 467446)
-- Name: gd_registro_consultas pk_gd_registro_consulta; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gd_registro_consultas
    ADD CONSTRAINT pk_gd_registro_consulta PRIMARY KEY (codigo, anexo, documento);


--
-- TOC entry 2080 (class 2606 OID 467448)
-- Name: gd_tipo_contenedor pk_gd_tipo_contenedor; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gd_tipo_contenedor
    ADD CONSTRAINT pk_gd_tipo_contenedor PRIMARY KEY (codigo);


--
-- TOC entry 2082 (class 2606 OID 467450)
-- Name: gd_tipo_documento pk_gd_tipo_documento; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gd_tipo_documento
    ADD CONSTRAINT pk_gd_tipo_documento PRIMARY KEY (codigo);


--
-- TOC entry 2086 (class 2606 OID 467452)
-- Name: gd_unidad_operativa pk_gd_unidad_operativa; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gd_unidad_operativa
    ADD CONSTRAINT pk_gd_unidad_operativa PRIMARY KEY (codigo);


--
-- TOC entry 2088 (class 2606 OID 467454)
-- Name: gd_zona pk_gd_zona; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gd_zona
    ADD CONSTRAINT pk_gd_zona PRIMARY KEY (codigo);


--
-- TOC entry 2096 (class 2606 OID 467456)
-- Name: sis_modulos_roll pk_modulo_roll; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sis_modulos_roll
    ADD CONSTRAINT pk_modulo_roll PRIMARY KEY (modulo, roll);


--
-- TOC entry 2094 (class 2606 OID 467458)
-- Name: sis_modulos pk_modulos; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sis_modulos
    ADD CONSTRAINT pk_modulos PRIMARY KEY (codigo);


--
-- TOC entry 2076 (class 2606 OID 467460)
-- Name: gd_persona pk_persona; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gd_persona
    ADD CONSTRAINT pk_persona PRIMARY KEY (codigo);


--
-- TOC entry 2090 (class 2606 OID 467462)
-- Name: prueba pk_prueba; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.prueba
    ADD CONSTRAINT pk_prueba PRIMARY KEY (codigo);


--
-- TOC entry 2098 (class 2606 OID 467464)
-- Name: sis_rol_usuario pk_rol_usuario; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sis_rol_usuario
    ADD CONSTRAINT pk_rol_usuario PRIMARY KEY (codigo);


--
-- TOC entry 2092 (class 2606 OID 467466)
-- Name: sis_configuracion pk_sis_configuracion; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sis_configuracion
    ADD CONSTRAINT pk_sis_configuracion PRIMARY KEY (codigo, tipo);


--
-- TOC entry 2102 (class 2606 OID 467468)
-- Name: tipo_usuario pk_tipo_usuario; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tipo_usuario
    ADD CONSTRAINT pk_tipo_usuario PRIMARY KEY (codigo);


--
-- TOC entry 2100 (class 2606 OID 467470)
-- Name: sis_usuario pk_usuario; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sis_usuario
    ADD CONSTRAINT pk_usuario PRIMARY KEY (codigo);


--
-- TOC entry 2104 (class 2606 OID 467472)
-- Name: zona pk_zona; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.zona
    ADD CONSTRAINT pk_zona PRIMARY KEY (codigo);


--
-- TOC entry 2084 (class 2606 OID 467474)
-- Name: gd_tipo_documento unique_nombre_tipo_documento; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gd_tipo_documento
    ADD CONSTRAINT unique_nombre_tipo_documento UNIQUE (nombre);


--
-- TOC entry 2105 (class 2606 OID 467475)
-- Name: sis_modulos fk_circular_modulo; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sis_modulos
    ADD CONSTRAINT fk_circular_modulo FOREIGN KEY (padre) REFERENCES public.sis_modulos(codigo);


--
-- TOC entry 2106 (class 2606 OID 467480)
-- Name: sis_modulos_roll fk_permiso_modulo_usuario; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sis_modulos_roll
    ADD CONSTRAINT fk_permiso_modulo_usuario FOREIGN KEY (modulo) REFERENCES public.sis_modulos(codigo) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 2107 (class 2606 OID 467485)
-- Name: sis_usuario fk_usuario_persona; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sis_usuario
    ADD CONSTRAINT fk_usuario_persona FOREIGN KEY (persona) REFERENCES public.gd_persona(codigo);


--
-- TOC entry 2222 (class 0 OID 0)
-- Dependencies: 7
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- TOC entry 2224 (class 0 OID 0)
-- Dependencies: 666
-- Name: TYPE codigos; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TYPE public.codigos FROM PUBLIC;
REVOKE ALL ON TYPE public.codigos FROM postgres;
GRANT ALL ON TYPE public.codigos TO PUBLIC;


--
-- TOC entry 2225 (class 0 OID 0)
-- Dependencies: 209
-- Name: FUNCTION es_fecha(pvalor character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.es_fecha(pvalor character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.es_fecha(pvalor character varying) FROM postgres;
GRANT ALL ON FUNCTION public.es_fecha(pvalor character varying) TO postgres;
GRANT ALL ON FUNCTION public.es_fecha(pvalor character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.es_fecha(pvalor character varying) TO grupo_web;


--
-- TOC entry 2226 (class 0 OID 0)
-- Dependencies: 225
-- Name: FUNCTION es_numero(pvalor character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.es_numero(pvalor character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.es_numero(pvalor character varying) FROM postgres;
GRANT ALL ON FUNCTION public.es_numero(pvalor character varying) TO postgres;
GRANT ALL ON FUNCTION public.es_numero(pvalor character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.es_numero(pvalor character varying) TO grupo_web;


--
-- TOC entry 2227 (class 0 OID 0)
-- Dependencies: 224
-- Name: FUNCTION fechacompleta(pfecha character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.fechacompleta(pfecha character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.fechacompleta(pfecha character varying) FROM postgres;
GRANT ALL ON FUNCTION public.fechacompleta(pfecha character varying) TO postgres;
GRANT ALL ON FUNCTION public.fechacompleta(pfecha character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.fechacompleta(pfecha character varying) TO grupo_web;


--
-- TOC entry 2228 (class 0 OID 0)
-- Dependencies: 226
-- Name: FUNCTION fechacompleta2(pfecha character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.fechacompleta2(pfecha character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.fechacompleta2(pfecha character varying) FROM postgres;
GRANT ALL ON FUNCTION public.fechacompleta2(pfecha character varying) TO postgres;
GRANT ALL ON FUNCTION public.fechacompleta2(pfecha character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.fechacompleta2(pfecha character varying) TO grupo_web;


--
-- TOC entry 2229 (class 0 OID 0)
-- Dependencies: 211
-- Name: FUNCTION fun_ejemplo_array(pcondicion character varying[], OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.fun_ejemplo_array(pcondicion character varying[], OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.fun_ejemplo_array(pcondicion character varying[], OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.fun_ejemplo_array(pcondicion character varying[], OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.fun_ejemplo_array(pcondicion character varying[], OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.fun_ejemplo_array(pcondicion character varying[], OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2230 (class 0 OID 0)
-- Dependencies: 212
-- Name: FUNCTION fun_ejemplo_array(pcondicion character varying, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.fun_ejemplo_array(pcondicion character varying, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.fun_ejemplo_array(pcondicion character varying, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.fun_ejemplo_array(pcondicion character varying, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.fun_ejemplo_array(pcondicion character varying, OUT res character varying, OUT cod character varying) TO PUBLIC;


--
-- TOC entry 2231 (class 0 OID 0)
-- Dependencies: 214
-- Name: FUNCTION fun_ordentipo(pnomenclatura character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.fun_ordentipo(pnomenclatura character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.fun_ordentipo(pnomenclatura character varying) FROM postgres;
GRANT ALL ON FUNCTION public.fun_ordentipo(pnomenclatura character varying) TO postgres;
GRANT ALL ON FUNCTION public.fun_ordentipo(pnomenclatura character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.fun_ordentipo(pnomenclatura character varying) TO grupo_web;


--
-- TOC entry 2232 (class 0 OID 0)
-- Dependencies: 227
-- Name: FUNCTION gd_borra_atributo_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.gd_borra_atributo_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.gd_borra_atributo_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.gd_borra_atributo_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.gd_borra_atributo_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.gd_borra_atributo_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2233 (class 0 OID 0)
-- Dependencies: 228
-- Name: FUNCTION gd_borra_contenedor(pcodigo character varying, pusuario character varying, pempresa_act character varying, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.gd_borra_contenedor(pcodigo character varying, pusuario character varying, pempresa_act character varying, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.gd_borra_contenedor(pcodigo character varying, pusuario character varying, pempresa_act character varying, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.gd_borra_contenedor(pcodigo character varying, pusuario character varying, pempresa_act character varying, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.gd_borra_contenedor(pcodigo character varying, pusuario character varying, pempresa_act character varying, OUT res character varying, OUT cod character varying) TO PUBLIC;


--
-- TOC entry 2234 (class 0 OID 0)
-- Dependencies: 229
-- Name: FUNCTION gd_borra_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.gd_borra_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.gd_borra_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.gd_borra_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.gd_borra_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.gd_borra_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2235 (class 0 OID 0)
-- Dependencies: 230
-- Name: FUNCTION gd_borra_empresa(pcodigo character varying, pusuario character varying, pmodulo character varying, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.gd_borra_empresa(pcodigo character varying, pusuario character varying, pmodulo character varying, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.gd_borra_empresa(pcodigo character varying, pusuario character varying, pmodulo character varying, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.gd_borra_empresa(pcodigo character varying, pusuario character varying, pmodulo character varying, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.gd_borra_empresa(pcodigo character varying, pusuario character varying, pmodulo character varying, OUT res character varying, OUT cod character varying) TO PUBLIC;


--
-- TOC entry 2236 (class 0 OID 0)
-- Dependencies: 216
-- Name: FUNCTION gd_get_datos_documentos(pdatos character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.gd_get_datos_documentos(pdatos character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.gd_get_datos_documentos(pdatos character varying) FROM postgres;
GRANT ALL ON FUNCTION public.gd_get_datos_documentos(pdatos character varying) TO postgres;
GRANT ALL ON FUNCTION public.gd_get_datos_documentos(pdatos character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.gd_get_datos_documentos(pdatos character varying) TO grupo_web;


--
-- TOC entry 2237 (class 0 OID 0)
-- Dependencies: 215
-- Name: FUNCTION gd_get_datos_documentos_campos(pdatos character varying, ptipo_documento character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.gd_get_datos_documentos_campos(pdatos character varying, ptipo_documento character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.gd_get_datos_documentos_campos(pdatos character varying, ptipo_documento character varying) FROM postgres;
GRANT ALL ON FUNCTION public.gd_get_datos_documentos_campos(pdatos character varying, ptipo_documento character varying) TO postgres;
GRANT ALL ON FUNCTION public.gd_get_datos_documentos_campos(pdatos character varying, ptipo_documento character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.gd_get_datos_documentos_campos(pdatos character varying, ptipo_documento character varying) TO grupo_web;


--
-- TOC entry 2238 (class 0 OID 0)
-- Dependencies: 231
-- Name: FUNCTION gd_reg_anexo_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, paccion character varying, pdir_fisica_documento character varying, pnombre_doc character varying, preferencia_doc character varying, pdir_virtual character varying, pextencion character varying, pfojas integer, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.gd_reg_anexo_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, paccion character varying, pdir_fisica_documento character varying, pnombre_doc character varying, preferencia_doc character varying, pdir_virtual character varying, pextencion character varying, pfojas integer, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.gd_reg_anexo_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, paccion character varying, pdir_fisica_documento character varying, pnombre_doc character varying, preferencia_doc character varying, pdir_virtual character varying, pextencion character varying, pfojas integer, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.gd_reg_anexo_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, paccion character varying, pdir_fisica_documento character varying, pnombre_doc character varying, preferencia_doc character varying, pdir_virtual character varying, pextencion character varying, pfojas integer, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.gd_reg_anexo_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, paccion character varying, pdir_fisica_documento character varying, pnombre_doc character varying, preferencia_doc character varying, pdir_virtual character varying, pextencion character varying, pfojas integer, OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.gd_reg_anexo_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, paccion character varying, pdir_fisica_documento character varying, pnombre_doc character varying, preferencia_doc character varying, pdir_virtual character varying, pextencion character varying, pfojas integer, OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2239 (class 0 OID 0)
-- Dependencies: 232
-- Name: FUNCTION gd_reg_atributos_documento(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, ptipo_documento character varying, pnombre character varying, pobligatorio character varying, ptipo_dato character varying, porden numeric, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.gd_reg_atributos_documento(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, ptipo_documento character varying, pnombre character varying, pobligatorio character varying, ptipo_dato character varying, porden numeric, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.gd_reg_atributos_documento(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, ptipo_documento character varying, pnombre character varying, pobligatorio character varying, ptipo_dato character varying, porden numeric, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.gd_reg_atributos_documento(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, ptipo_documento character varying, pnombre character varying, pobligatorio character varying, ptipo_dato character varying, porden numeric, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.gd_reg_atributos_documento(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, ptipo_documento character varying, pnombre character varying, pobligatorio character varying, ptipo_dato character varying, porden numeric, OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.gd_reg_atributos_documento(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, ptipo_documento character varying, pnombre character varying, pobligatorio character varying, ptipo_dato character varying, porden numeric, OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2240 (class 0 OID 0)
-- Dependencies: 218
-- Name: FUNCTION gd_reg_contenedor(pusuario character varying, pempresa_act character varying, pcodigo character varying, pnombre character varying, pdescripcion character varying, ptipo character varying, pcontenedor_padre character varying, pestado character varying, pcustodio character varying, pborrado character varying, pcodificacion character varying, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.gd_reg_contenedor(pusuario character varying, pempresa_act character varying, pcodigo character varying, pnombre character varying, pdescripcion character varying, ptipo character varying, pcontenedor_padre character varying, pestado character varying, pcustodio character varying, pborrado character varying, pcodificacion character varying, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.gd_reg_contenedor(pusuario character varying, pempresa_act character varying, pcodigo character varying, pnombre character varying, pdescripcion character varying, ptipo character varying, pcontenedor_padre character varying, pestado character varying, pcustodio character varying, pborrado character varying, pcodificacion character varying, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.gd_reg_contenedor(pusuario character varying, pempresa_act character varying, pcodigo character varying, pnombre character varying, pdescripcion character varying, ptipo character varying, pcontenedor_padre character varying, pestado character varying, pcustodio character varying, pborrado character varying, pcodificacion character varying, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.gd_reg_contenedor(pusuario character varying, pempresa_act character varying, pcodigo character varying, pnombre character varying, pdescripcion character varying, ptipo character varying, pcontenedor_padre character varying, pestado character varying, pcustodio character varying, pborrado character varying, pcodificacion character varying, OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.gd_reg_contenedor(pusuario character varying, pempresa_act character varying, pcodigo character varying, pnombre character varying, pdescripcion character varying, ptipo character varying, pcontenedor_padre character varying, pestado character varying, pcustodio character varying, pborrado character varying, pcodificacion character varying, OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2241 (class 0 OID 0)
-- Dependencies: 217
-- Name: FUNCTION gd_reg_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, porigen character varying, pcodificacion character varying, ptipo character varying, pestado character varying, pproc_origen character varying, pdatos_documento text, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.gd_reg_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, porigen character varying, pcodificacion character varying, ptipo character varying, pestado character varying, pproc_origen character varying, pdatos_documento text, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.gd_reg_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, porigen character varying, pcodificacion character varying, ptipo character varying, pestado character varying, pproc_origen character varying, pdatos_documento text, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.gd_reg_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, porigen character varying, pcodificacion character varying, ptipo character varying, pestado character varying, pproc_origen character varying, pdatos_documento text, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.gd_reg_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, porigen character varying, pcodificacion character varying, ptipo character varying, pestado character varying, pproc_origen character varying, pdatos_documento text, OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.gd_reg_documento(pcodigo character varying, pusuario character varying, pempresa_act character varying, pcontenedor character varying, porigen character varying, pcodificacion character varying, ptipo character varying, pestado character varying, pproc_origen character varying, pdatos_documento text, OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2242 (class 0 OID 0)
-- Dependencies: 233
-- Name: FUNCTION gd_reg_empresa(pcodigo character varying, pmodulo character varying, pusuario character varying, pnombre character varying, pruc character varying, pdireccion character varying, pnomenclatura character varying, pdirectorio character varying, pempresa_padre character varying, ptipo character varying, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.gd_reg_empresa(pcodigo character varying, pmodulo character varying, pusuario character varying, pnombre character varying, pruc character varying, pdireccion character varying, pnomenclatura character varying, pdirectorio character varying, pempresa_padre character varying, ptipo character varying, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.gd_reg_empresa(pcodigo character varying, pmodulo character varying, pusuario character varying, pnombre character varying, pruc character varying, pdireccion character varying, pnomenclatura character varying, pdirectorio character varying, pempresa_padre character varying, ptipo character varying, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.gd_reg_empresa(pcodigo character varying, pmodulo character varying, pusuario character varying, pnombre character varying, pruc character varying, pdireccion character varying, pnomenclatura character varying, pdirectorio character varying, pempresa_padre character varying, ptipo character varying, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.gd_reg_empresa(pcodigo character varying, pmodulo character varying, pusuario character varying, pnombre character varying, pruc character varying, pdireccion character varying, pnomenclatura character varying, pdirectorio character varying, pempresa_padre character varying, ptipo character varying, OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.gd_reg_empresa(pcodigo character varying, pmodulo character varying, pusuario character varying, pnombre character varying, pruc character varying, pdireccion character varying, pnomenclatura character varying, pdirectorio character varying, pempresa_padre character varying, ptipo character varying, OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2243 (class 0 OID 0)
-- Dependencies: 234
-- Name: FUNCTION gd_reg_mover_contenedor(pusuario character varying, pempresa_act character varying, pcontenedor_padre character varying, pcodigos character varying, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.gd_reg_mover_contenedor(pusuario character varying, pempresa_act character varying, pcontenedor_padre character varying, pcodigos character varying, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.gd_reg_mover_contenedor(pusuario character varying, pempresa_act character varying, pcontenedor_padre character varying, pcodigos character varying, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.gd_reg_mover_contenedor(pusuario character varying, pempresa_act character varying, pcontenedor_padre character varying, pcodigos character varying, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.gd_reg_mover_contenedor(pusuario character varying, pempresa_act character varying, pcontenedor_padre character varying, pcodigos character varying, OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.gd_reg_mover_contenedor(pusuario character varying, pempresa_act character varying, pcontenedor_padre character varying, pcodigos character varying, OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2244 (class 0 OID 0)
-- Dependencies: 237
-- Name: FUNCTION gd_reg_mover_documento(pusuario character varying, pempresa_act character varying, pcontenedor_padre character varying, pcodigos character varying, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.gd_reg_mover_documento(pusuario character varying, pempresa_act character varying, pcontenedor_padre character varying, pcodigos character varying, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.gd_reg_mover_documento(pusuario character varying, pempresa_act character varying, pcontenedor_padre character varying, pcodigos character varying, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.gd_reg_mover_documento(pusuario character varying, pempresa_act character varying, pcontenedor_padre character varying, pcodigos character varying, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.gd_reg_mover_documento(pusuario character varying, pempresa_act character varying, pcontenedor_padre character varying, pcodigos character varying, OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.gd_reg_mover_documento(pusuario character varying, pempresa_act character varying, pcontenedor_padre character varying, pcodigos character varying, OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2245 (class 0 OID 0)
-- Dependencies: 238
-- Name: FUNCTION gd_reg_persona(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pcedula character varying, papellido character varying, pnombre character varying, pdireccion character varying, ptelefono character varying, pcargo character varying, pcorreo character varying, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.gd_reg_persona(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pcedula character varying, papellido character varying, pnombre character varying, pdireccion character varying, ptelefono character varying, pcargo character varying, pcorreo character varying, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.gd_reg_persona(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pcedula character varying, papellido character varying, pnombre character varying, pdireccion character varying, ptelefono character varying, pcargo character varying, pcorreo character varying, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.gd_reg_persona(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pcedula character varying, papellido character varying, pnombre character varying, pdireccion character varying, ptelefono character varying, pcargo character varying, pcorreo character varying, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.gd_reg_persona(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pcedula character varying, papellido character varying, pnombre character varying, pdireccion character varying, ptelefono character varying, pcargo character varying, pcorreo character varying, OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.gd_reg_persona(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pcedula character varying, papellido character varying, pnombre character varying, pdireccion character varying, ptelefono character varying, pcargo character varying, pcorreo character varying, OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2246 (class 0 OID 0)
-- Dependencies: 239
-- Name: FUNCTION gd_reg_registro_consulta(pmodulo character varying, pusuario character varying, pdocumento character varying, panexo character varying, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.gd_reg_registro_consulta(pmodulo character varying, pusuario character varying, pdocumento character varying, panexo character varying, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.gd_reg_registro_consulta(pmodulo character varying, pusuario character varying, pdocumento character varying, panexo character varying, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.gd_reg_registro_consulta(pmodulo character varying, pusuario character varying, pdocumento character varying, panexo character varying, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.gd_reg_registro_consulta(pmodulo character varying, pusuario character varying, pdocumento character varying, panexo character varying, OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.gd_reg_registro_consulta(pmodulo character varying, pusuario character varying, pdocumento character varying, panexo character varying, OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2247 (class 0 OID 0)
-- Dependencies: 240
-- Name: FUNCTION gd_reg_tipo_documento(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pabreviatura character varying, pnombre character varying, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.gd_reg_tipo_documento(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pabreviatura character varying, pnombre character varying, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.gd_reg_tipo_documento(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pabreviatura character varying, pnombre character varying, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.gd_reg_tipo_documento(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pabreviatura character varying, pnombre character varying, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.gd_reg_tipo_documento(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pabreviatura character varying, pnombre character varying, OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.gd_reg_tipo_documento(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pabreviatura character varying, pnombre character varying, OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2248 (class 0 OID 0)
-- Dependencies: 241
-- Name: FUNCTION gd_valida_datos_doc_tp(pvalor text); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.gd_valida_datos_doc_tp(pvalor text) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.gd_valida_datos_doc_tp(pvalor text) FROM postgres;
GRANT ALL ON FUNCTION public.gd_valida_datos_doc_tp(pvalor text) TO postgres;
GRANT ALL ON FUNCTION public.gd_valida_datos_doc_tp(pvalor text) TO PUBLIC;
GRANT ALL ON FUNCTION public.gd_valida_datos_doc_tp(pvalor text) TO grupo_web;


--
-- TOC entry 2249 (class 0 OID 0)
-- Dependencies: 242
-- Name: FUNCTION get_contenido_directorio(pcodigo character varying, ptipo character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.get_contenido_directorio(pcodigo character varying, ptipo character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.get_contenido_directorio(pcodigo character varying, ptipo character varying) FROM postgres;
GRANT ALL ON FUNCTION public.get_contenido_directorio(pcodigo character varying, ptipo character varying) TO postgres;
GRANT ALL ON FUNCTION public.get_contenido_directorio(pcodigo character varying, ptipo character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.get_contenido_directorio(pcodigo character varying, ptipo character varying) TO grupo_web;


--
-- TOC entry 2250 (class 0 OID 0)
-- Dependencies: 243
-- Name: FUNCTION get_directorio(pcodigo character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.get_directorio(pcodigo character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.get_directorio(pcodigo character varying) FROM postgres;
GRANT ALL ON FUNCTION public.get_directorio(pcodigo character varying) TO postgres;
GRANT ALL ON FUNCTION public.get_directorio(pcodigo character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.get_directorio(pcodigo character varying) TO grupo_web;


--
-- TOC entry 2251 (class 0 OID 0)
-- Dependencies: 220
-- Name: FUNCTION get_directorio_documento(pcodigo character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.get_directorio_documento(pcodigo character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.get_directorio_documento(pcodigo character varying) FROM postgres;
GRANT ALL ON FUNCTION public.get_directorio_documento(pcodigo character varying) TO postgres;
GRANT ALL ON FUNCTION public.get_directorio_documento(pcodigo character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.get_directorio_documento(pcodigo character varying) TO grupo_web;


--
-- TOC entry 2252 (class 0 OID 0)
-- Dependencies: 236
-- Name: FUNCTION get_directorio_padre(ppadre character varying, OUT codi character varying, OUT direc character varying, OUT rtipo character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.get_directorio_padre(ppadre character varying, OUT codi character varying, OUT direc character varying, OUT rtipo character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.get_directorio_padre(ppadre character varying, OUT codi character varying, OUT direc character varying, OUT rtipo character varying) FROM postgres;
GRANT ALL ON FUNCTION public.get_directorio_padre(ppadre character varying, OUT codi character varying, OUT direc character varying, OUT rtipo character varying) TO postgres;
GRANT ALL ON FUNCTION public.get_directorio_padre(ppadre character varying, OUT codi character varying, OUT direc character varying, OUT rtipo character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.get_directorio_padre(ppadre character varying, OUT codi character varying, OUT direc character varying, OUT rtipo character varying) TO grupo_web;


--
-- TOC entry 2253 (class 0 OID 0)
-- Dependencies: 235
-- Name: FUNCTION get_directorio_padre_all(ppadre character varying, OUT codi character varying, OUT direc character varying, OUT rtipo character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.get_directorio_padre_all(ppadre character varying, OUT codi character varying, OUT direc character varying, OUT rtipo character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.get_directorio_padre_all(ppadre character varying, OUT codi character varying, OUT direc character varying, OUT rtipo character varying) FROM postgres;
GRANT ALL ON FUNCTION public.get_directorio_padre_all(ppadre character varying, OUT codi character varying, OUT direc character varying, OUT rtipo character varying) TO postgres;
GRANT ALL ON FUNCTION public.get_directorio_padre_all(ppadre character varying, OUT codi character varying, OUT direc character varying, OUT rtipo character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.get_directorio_padre_all(ppadre character varying, OUT codi character varying, OUT direc character varying, OUT rtipo character varying) TO grupo_web;


--
-- TOC entry 2254 (class 0 OID 0)
-- Dependencies: 213
-- Name: FUNCTION get_numero(pvalor character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.get_numero(pvalor character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.get_numero(pvalor character varying) FROM postgres;
GRANT ALL ON FUNCTION public.get_numero(pvalor character varying) TO postgres;
GRANT ALL ON FUNCTION public.get_numero(pvalor character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.get_numero(pvalor character varying) TO grupo_web;


--
-- TOC entry 2255 (class 0 OID 0)
-- Dependencies: 244
-- Name: FUNCTION get_puede_editar_contenido(pcontenedor character varying, pempresa character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.get_puede_editar_contenido(pcontenedor character varying, pempresa character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.get_puede_editar_contenido(pcontenedor character varying, pempresa character varying) FROM postgres;
GRANT ALL ON FUNCTION public.get_puede_editar_contenido(pcontenedor character varying, pempresa character varying) TO postgres;
GRANT ALL ON FUNCTION public.get_puede_editar_contenido(pcontenedor character varying, pempresa character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.get_puede_editar_contenido(pcontenedor character varying, pempresa character varying) TO grupo_web;


--
-- TOC entry 2256 (class 0 OID 0)
-- Dependencies: 247
-- Name: FUNCTION sis_accesos_rol_usuario(pusuario character varying, ptabla character varying, pmodulo character varying, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.sis_accesos_rol_usuario(pusuario character varying, ptabla character varying, pmodulo character varying, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.sis_accesos_rol_usuario(pusuario character varying, ptabla character varying, pmodulo character varying, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.sis_accesos_rol_usuario(pusuario character varying, ptabla character varying, pmodulo character varying, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.sis_accesos_rol_usuario(pusuario character varying, ptabla character varying, pmodulo character varying, OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.sis_accesos_rol_usuario(pusuario character varying, ptabla character varying, pmodulo character varying, OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2257 (class 0 OID 0)
-- Dependencies: 245
-- Name: FUNCTION sis_genera_menu(pcodigo character varying, ppadre character varying, nivel integer, pdirec character varying, OUT res character varying, OUT codi character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.sis_genera_menu(pcodigo character varying, ppadre character varying, nivel integer, pdirec character varying, OUT res character varying, OUT codi character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.sis_genera_menu(pcodigo character varying, ppadre character varying, nivel integer, pdirec character varying, OUT res character varying, OUT codi character varying) FROM postgres;
GRANT ALL ON FUNCTION public.sis_genera_menu(pcodigo character varying, ppadre character varying, nivel integer, pdirec character varying, OUT res character varying, OUT codi character varying) TO postgres;
GRANT ALL ON FUNCTION public.sis_genera_menu(pcodigo character varying, ppadre character varying, nivel integer, pdirec character varying, OUT res character varying, OUT codi character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.sis_genera_menu(pcodigo character varying, ppadre character varying, nivel integer, pdirec character varying, OUT res character varying, OUT codi character varying) TO grupo_web;


--
-- TOC entry 2258 (class 0 OID 0)
-- Dependencies: 246
-- Name: FUNCTION sis_get_modulos_roll(pcodigo character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.sis_get_modulos_roll(pcodigo character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.sis_get_modulos_roll(pcodigo character varying) FROM postgres;
GRANT ALL ON FUNCTION public.sis_get_modulos_roll(pcodigo character varying) TO postgres;
GRANT ALL ON FUNCTION public.sis_get_modulos_roll(pcodigo character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.sis_get_modulos_roll(pcodigo character varying) TO grupo_web;


--
-- TOC entry 2259 (class 0 OID 0)
-- Dependencies: 221
-- Name: FUNCTION sis_mi_acendencia(pcodigo character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.sis_mi_acendencia(pcodigo character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.sis_mi_acendencia(pcodigo character varying) FROM postgres;
GRANT ALL ON FUNCTION public.sis_mi_acendencia(pcodigo character varying) TO postgres;
GRANT ALL ON FUNCTION public.sis_mi_acendencia(pcodigo character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.sis_mi_acendencia(pcodigo character varying) TO grupo_web;


--
-- TOC entry 2260 (class 0 OID 0)
-- Dependencies: 248
-- Name: FUNCTION sis_reg_modulos(pcodigo character varying, pmodulo character varying, pusuario character varying, pnombre character varying, ppagina character varying, ptipo character varying, ppadre character varying, preferencia character varying, pdirecto character varying, pdir_img character varying, porden integer, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.sis_reg_modulos(pcodigo character varying, pmodulo character varying, pusuario character varying, pnombre character varying, ppagina character varying, ptipo character varying, ppadre character varying, preferencia character varying, pdirecto character varying, pdir_img character varying, porden integer, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.sis_reg_modulos(pcodigo character varying, pmodulo character varying, pusuario character varying, pnombre character varying, ppagina character varying, ptipo character varying, ppadre character varying, preferencia character varying, pdirecto character varying, pdir_img character varying, porden integer, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.sis_reg_modulos(pcodigo character varying, pmodulo character varying, pusuario character varying, pnombre character varying, ppagina character varying, ptipo character varying, ppadre character varying, preferencia character varying, pdirecto character varying, pdir_img character varying, porden integer, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.sis_reg_modulos(pcodigo character varying, pmodulo character varying, pusuario character varying, pnombre character varying, ppagina character varying, ptipo character varying, ppadre character varying, preferencia character varying, pdirecto character varying, pdir_img character varying, porden integer, OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.sis_reg_modulos(pcodigo character varying, pmodulo character varying, pusuario character varying, pnombre character varying, ppagina character varying, ptipo character varying, ppadre character varying, preferencia character varying, pdirecto character varying, pdir_img character varying, porden integer, OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2261 (class 0 OID 0)
-- Dependencies: 222
-- Name: FUNCTION sis_reg_permiso_roll(pusuario character varying, proll character varying, pmodulo character varying, pacceso character varying, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.sis_reg_permiso_roll(pusuario character varying, proll character varying, pmodulo character varying, pacceso character varying, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.sis_reg_permiso_roll(pusuario character varying, proll character varying, pmodulo character varying, pacceso character varying, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.sis_reg_permiso_roll(pusuario character varying, proll character varying, pmodulo character varying, pacceso character varying, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.sis_reg_permiso_roll(pusuario character varying, proll character varying, pmodulo character varying, pacceso character varying, OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.sis_reg_permiso_roll(pusuario character varying, proll character varying, pmodulo character varying, pacceso character varying, OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2262 (class 0 OID 0)
-- Dependencies: 250
-- Name: FUNCTION sis_reg_rol_usuarios(pcodigo character varying, pusuario character varying, pempresa_act character varying, pnombre character varying, pmostrar character varying, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.sis_reg_rol_usuarios(pcodigo character varying, pusuario character varying, pempresa_act character varying, pnombre character varying, pmostrar character varying, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.sis_reg_rol_usuarios(pcodigo character varying, pusuario character varying, pempresa_act character varying, pnombre character varying, pmostrar character varying, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.sis_reg_rol_usuarios(pcodigo character varying, pusuario character varying, pempresa_act character varying, pnombre character varying, pmostrar character varying, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.sis_reg_rol_usuarios(pcodigo character varying, pusuario character varying, pempresa_act character varying, pnombre character varying, pmostrar character varying, OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.sis_reg_rol_usuarios(pcodigo character varying, pusuario character varying, pempresa_act character varying, pnombre character varying, pmostrar character varying, OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2263 (class 0 OID 0)
-- Dependencies: 249
-- Name: FUNCTION sis_reg_tipo_contendor(pcodigo character varying, pmodulo character varying, pusuario character varying, pcodigo2 character varying, pnombre character varying, pimagen character varying, pnivel character varying, phijos character varying, pborrable character varying, ptipo_empresa character varying, pempresa_padre character varying, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.sis_reg_tipo_contendor(pcodigo character varying, pmodulo character varying, pusuario character varying, pcodigo2 character varying, pnombre character varying, pimagen character varying, pnivel character varying, phijos character varying, pborrable character varying, ptipo_empresa character varying, pempresa_padre character varying, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.sis_reg_tipo_contendor(pcodigo character varying, pmodulo character varying, pusuario character varying, pcodigo2 character varying, pnombre character varying, pimagen character varying, pnivel character varying, phijos character varying, pborrable character varying, ptipo_empresa character varying, pempresa_padre character varying, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.sis_reg_tipo_contendor(pcodigo character varying, pmodulo character varying, pusuario character varying, pcodigo2 character varying, pnombre character varying, pimagen character varying, pnivel character varying, phijos character varying, pborrable character varying, ptipo_empresa character varying, pempresa_padre character varying, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.sis_reg_tipo_contendor(pcodigo character varying, pmodulo character varying, pusuario character varying, pcodigo2 character varying, pnombre character varying, pimagen character varying, pnivel character varying, phijos character varying, pborrable character varying, ptipo_empresa character varying, pempresa_padre character varying, OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.sis_reg_tipo_contendor(pcodigo character varying, pmodulo character varying, pusuario character varying, pcodigo2 character varying, pnombre character varying, pimagen character varying, pnivel character varying, phijos character varying, pborrable character varying, ptipo_empresa character varying, pempresa_padre character varying, OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2264 (class 0 OID 0)
-- Dependencies: 223
-- Name: FUNCTION sis_reg_usuario_clave(pcodigo character varying, pnombre character varying, pclave character varying, pclave2 character varying, ppersona character varying, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.sis_reg_usuario_clave(pcodigo character varying, pnombre character varying, pclave character varying, pclave2 character varying, ppersona character varying, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.sis_reg_usuario_clave(pcodigo character varying, pnombre character varying, pclave character varying, pclave2 character varying, ppersona character varying, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.sis_reg_usuario_clave(pcodigo character varying, pnombre character varying, pclave character varying, pclave2 character varying, ppersona character varying, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.sis_reg_usuario_clave(pcodigo character varying, pnombre character varying, pclave character varying, pclave2 character varying, ppersona character varying, OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.sis_reg_usuario_clave(pcodigo character varying, pnombre character varying, pclave character varying, pclave2 character varying, ppersona character varying, OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2265 (class 0 OID 0)
-- Dependencies: 251
-- Name: FUNCTION sis_reg_usuarios(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pnombre character varying, pclave character varying, ppersona character varying, ptipo character varying, prol character varying, pact character varying, pempresa character varying, pestado character varying, pdirectorio character varying, OUT res character varying, OUT cod character varying); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.sis_reg_usuarios(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pnombre character varying, pclave character varying, ppersona character varying, ptipo character varying, prol character varying, pact character varying, pempresa character varying, pestado character varying, pdirectorio character varying, OUT res character varying, OUT cod character varying) FROM PUBLIC;
REVOKE ALL ON FUNCTION public.sis_reg_usuarios(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pnombre character varying, pclave character varying, ppersona character varying, ptipo character varying, prol character varying, pact character varying, pempresa character varying, pestado character varying, pdirectorio character varying, OUT res character varying, OUT cod character varying) FROM postgres;
GRANT ALL ON FUNCTION public.sis_reg_usuarios(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pnombre character varying, pclave character varying, ppersona character varying, ptipo character varying, prol character varying, pact character varying, pempresa character varying, pestado character varying, pdirectorio character varying, OUT res character varying, OUT cod character varying) TO postgres;
GRANT ALL ON FUNCTION public.sis_reg_usuarios(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pnombre character varying, pclave character varying, ppersona character varying, ptipo character varying, prol character varying, pact character varying, pempresa character varying, pestado character varying, pdirectorio character varying, OUT res character varying, OUT cod character varying) TO PUBLIC;
GRANT ALL ON FUNCTION public.sis_reg_usuarios(pcodigo character varying, pmodulo character varying, pusuario character varying, pempresa_act character varying, pnombre character varying, pclave character varying, ppersona character varying, ptipo character varying, prol character varying, pact character varying, pempresa character varying, pestado character varying, pdirectorio character varying, OUT res character varying, OUT cod character varying) TO grupo_web;


--
-- TOC entry 2266 (class 0 OID 0)
-- Dependencies: 172
-- Name: TABLE auditoria; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.auditoria FROM PUBLIC;
REVOKE ALL ON TABLE public.auditoria FROM postgres;
GRANT ALL ON TABLE public.auditoria TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE public.auditoria TO grupo_web;


--
-- TOC entry 2268 (class 0 OID 0)
-- Dependencies: 173
-- Name: SEQUENCE auditoria_index_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE public.auditoria_index_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE public.auditoria_index_seq FROM postgres;
GRANT ALL ON SEQUENCE public.auditoria_index_seq TO postgres;
GRANT ALL ON SEQUENCE public.auditoria_index_seq TO grupo_web;


--
-- TOC entry 2277 (class 0 OID 0)
-- Dependencies: 174
-- Name: TABLE gd_atributos_documento; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.gd_atributos_documento FROM PUBLIC;
REVOKE ALL ON TABLE public.gd_atributos_documento FROM postgres;
GRANT ALL ON TABLE public.gd_atributos_documento TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE public.gd_atributos_documento TO grupo_web;


--
-- TOC entry 2278 (class 0 OID 0)
-- Dependencies: 175
-- Name: TABLE gd_auditoria; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.gd_auditoria FROM PUBLIC;
REVOKE ALL ON TABLE public.gd_auditoria FROM postgres;
GRANT ALL ON TABLE public.gd_auditoria TO postgres;
GRANT SELECT,INSERT,UPDATE ON TABLE public.gd_auditoria TO grupo_web;


--
-- TOC entry 2280 (class 0 OID 0)
-- Dependencies: 176
-- Name: SEQUENCE gd_auditoria_index_seq; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON SEQUENCE public.gd_auditoria_index_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE public.gd_auditoria_index_seq FROM postgres;
GRANT ALL ON SEQUENCE public.gd_auditoria_index_seq TO postgres;
GRANT ALL ON SEQUENCE public.gd_auditoria_index_seq TO grupo_web;


--
-- TOC entry 2289 (class 0 OID 0)
-- Dependencies: 177
-- Name: TABLE gd_contenedor; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.gd_contenedor FROM PUBLIC;
REVOKE ALL ON TABLE public.gd_contenedor FROM postgres;
GRANT ALL ON TABLE public.gd_contenedor TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.gd_contenedor TO grupo_web;


--
-- TOC entry 2298 (class 0 OID 0)
-- Dependencies: 178
-- Name: TABLE gd_documento; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.gd_documento FROM PUBLIC;
REVOKE ALL ON TABLE public.gd_documento FROM postgres;
GRANT ALL ON TABLE public.gd_documento TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.gd_documento TO grupo_web;


--
-- TOC entry 2305 (class 0 OID 0)
-- Dependencies: 179
-- Name: TABLE gd_documento_anexo; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.gd_documento_anexo FROM PUBLIC;
REVOKE ALL ON TABLE public.gd_documento_anexo FROM postgres;
GRANT ALL ON TABLE public.gd_documento_anexo TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.gd_documento_anexo TO grupo_web;


--
-- TOC entry 2312 (class 0 OID 0)
-- Dependencies: 180
-- Name: TABLE gd_empresa; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.gd_empresa FROM PUBLIC;
REVOKE ALL ON TABLE public.gd_empresa FROM postgres;
GRANT ALL ON TABLE public.gd_empresa TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.gd_empresa TO grupo_web;


--
-- TOC entry 2318 (class 0 OID 0)
-- Dependencies: 181
-- Name: TABLE gd_permiso_usuario; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.gd_permiso_usuario FROM PUBLIC;
REVOKE ALL ON TABLE public.gd_permiso_usuario FROM postgres;
GRANT ALL ON TABLE public.gd_permiso_usuario TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.gd_permiso_usuario TO grupo_web;


--
-- TOC entry 2320 (class 0 OID 0)
-- Dependencies: 182
-- Name: TABLE gd_persona; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.gd_persona FROM PUBLIC;
REVOKE ALL ON TABLE public.gd_persona FROM postgres;
GRANT ALL ON TABLE public.gd_persona TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.gd_persona TO grupo_web;


--
-- TOC entry 2325 (class 0 OID 0)
-- Dependencies: 183
-- Name: TABLE gd_registro_consultas; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.gd_registro_consultas FROM PUBLIC;
REVOKE ALL ON TABLE public.gd_registro_consultas FROM postgres;
GRANT ALL ON TABLE public.gd_registro_consultas TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.gd_registro_consultas TO grupo_web;


--
-- TOC entry 2331 (class 0 OID 0)
-- Dependencies: 184
-- Name: TABLE gd_tipo_contenedor; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.gd_tipo_contenedor FROM PUBLIC;
REVOKE ALL ON TABLE public.gd_tipo_contenedor FROM postgres;
GRANT ALL ON TABLE public.gd_tipo_contenedor TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.gd_tipo_contenedor TO grupo_web;


--
-- TOC entry 2336 (class 0 OID 0)
-- Dependencies: 185
-- Name: TABLE gd_tipo_documento; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.gd_tipo_documento FROM PUBLIC;
REVOKE ALL ON TABLE public.gd_tipo_documento FROM postgres;
GRANT ALL ON TABLE public.gd_tipo_documento TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.gd_tipo_documento TO grupo_web;


--
-- TOC entry 2337 (class 0 OID 0)
-- Dependencies: 186
-- Name: TABLE gd_unidad_operativa; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.gd_unidad_operativa FROM PUBLIC;
REVOKE ALL ON TABLE public.gd_unidad_operativa FROM postgres;
GRANT ALL ON TABLE public.gd_unidad_operativa TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.gd_unidad_operativa TO grupo_web;


--
-- TOC entry 2338 (class 0 OID 0)
-- Dependencies: 187
-- Name: TABLE gd_zona; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.gd_zona FROM PUBLIC;
REVOKE ALL ON TABLE public.gd_zona FROM postgres;
GRANT ALL ON TABLE public.gd_zona TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.gd_zona TO grupo_web;


--
-- TOC entry 2339 (class 0 OID 0)
-- Dependencies: 188
-- Name: TABLE prueba; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.prueba FROM PUBLIC;
REVOKE ALL ON TABLE public.prueba FROM postgres;
GRANT ALL ON TABLE public.prueba TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.prueba TO grupo_web;


--
-- TOC entry 2345 (class 0 OID 0)
-- Dependencies: 189
-- Name: TABLE sis_configuracion; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.sis_configuracion FROM PUBLIC;
REVOKE ALL ON TABLE public.sis_configuracion FROM postgres;
GRANT ALL ON TABLE public.sis_configuracion TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.sis_configuracion TO grupo_web;


--
-- TOC entry 2346 (class 0 OID 0)
-- Dependencies: 190
-- Name: TABLE sis_modulos; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.sis_modulos FROM PUBLIC;
REVOKE ALL ON TABLE public.sis_modulos FROM postgres;
GRANT ALL ON TABLE public.sis_modulos TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.sis_modulos TO grupo_web WITH GRANT OPTION;


--
-- TOC entry 2347 (class 0 OID 0)
-- Dependencies: 191
-- Name: TABLE sis_modulos_roll; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.sis_modulos_roll FROM PUBLIC;
REVOKE ALL ON TABLE public.sis_modulos_roll FROM postgres;
GRANT ALL ON TABLE public.sis_modulos_roll TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.sis_modulos_roll TO grupo_web;


--
-- TOC entry 2349 (class 0 OID 0)
-- Dependencies: 192
-- Name: TABLE sis_rol_usuario; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.sis_rol_usuario FROM PUBLIC;
REVOKE ALL ON TABLE public.sis_rol_usuario FROM postgres;
GRANT ALL ON TABLE public.sis_rol_usuario TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.sis_rol_usuario TO grupo_web;


--
-- TOC entry 2352 (class 0 OID 0)
-- Dependencies: 193
-- Name: TABLE sis_usuario; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.sis_usuario FROM PUBLIC;
REVOKE ALL ON TABLE public.sis_usuario FROM postgres;
GRANT ALL ON TABLE public.sis_usuario TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.sis_usuario TO grupo_web;


--
-- TOC entry 2353 (class 0 OID 0)
-- Dependencies: 194
-- Name: TABLE tipo_usuario; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.tipo_usuario FROM PUBLIC;
REVOKE ALL ON TABLE public.tipo_usuario FROM postgres;
GRANT ALL ON TABLE public.tipo_usuario TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.tipo_usuario TO grupo_web;


--
-- TOC entry 2354 (class 0 OID 0)
-- Dependencies: 195
-- Name: TABLE zona; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE public.zona FROM PUBLIC;
REVOKE ALL ON TABLE public.zona FROM postgres;
GRANT ALL ON TABLE public.zona TO postgres;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.zona TO grupo_web;


-- Completed on 2019-08-31 15:20:08

--
-- PostgreSQL database dump complete
--

